module main
author unknown
version 1 0 
description ''
variables x 

script 164 53 {
whenStarted
comment 'Device 1 is oled 096 with driver installed for gfx'
comment 'Device 2 is button S'
comment 'Device 3 is buzzer'
due_useI2C true
due_sel 1
Clear 0
Text2 '--DUELink--' 1 30 1
Text2 'Press button on' 1 1 21
Text2 'device 2 to play' 1 1 31
Text2 'sound on device 3' 1 1 41
Show
due_sel 2
due_btnen 1 true 1
forever {
  due_sel 2
  x = (due_btndown 1)
  if (x == 1) {
    due_sel 3
    Frequency 7 1000 100 '0.5'
  }
  waitMillis 750
}
}


module 'Basic Sensors' Input
author MicroBlocks
version 1 1 
tags tilt acceleration light sensor 
choices accelerometerRange '1' '2' '4' '8' 
description 'Provides blocks to read tilt in the three axes, acceleration, temperature and light level. Many boards come with this particular set of sensors, such as the micro:bit, the Circuit Playground Express, the Calliope or the Citilab ED1.'

  spec 'r' '[sensors:tiltX]' 'tilt x'
  spec 'r' '[sensors:tiltY]' 'tilt y'
  spec 'r' '[sensors:tiltZ]' 'tilt z'
  spec 'r' '[sensors:acceleration]' 'acceleration'
  spec 'r' '[display:lightLevel]' 'light level'
  spec 'r' '[sensors:temperature]' 'temperature (Â°C)'
  spec 'r' '[sensors:magneticField]' 'magnetic field'
  spec ' ' '_setAccelRange' 'set acceleration range _ g = 100' 'menu.accelerometerRange' '1'

to '_setAccelRange' n {
  '[sensors:setAccelerometerRange]' (0 + n)
}


module DUELink
author GHI
version 0 1 
description 'Standard DUELink Library (partial).



See https://www.duelink.com/docs/engine/stdlib'
variables _dueUseI2C 

  spec ' ' 'due_useI2C' 'DUELink useI2C _' 'bool' true
  spec 'r' 'due_connected' 'DUELink connected?'
  space
  space
  space
  space
  space
  space
  space
  spec ' ' 'due_run' 'Write command _' 'str' 'statled(100,100,5)'
  space
  spec 'r' '_due_awaitResultI2C' '_due await result (I2C)'
  spec 'r' '_due_endsWithPrompt' '_due byte array ends with prompt _' 'str'
  spec 'r' '_due_templateWith' '_due_template _ : with _ : _ : _ : _ : _ : _ : _ : _ : _ : _ : _ : _' 'str auto auto auto auto auto auto auto auto auto auto auto auto' 'test(%)' 123
  spec 'r' '_due_awaitResult' '_due await result'
  spec 'r' 'due_runWithResult' 'Write command _ with result' 'str' 'version()'
  spec ' ' '_due_send' '_due send _' 'str'

to '_due_awaitResult' {
  if _dueUseI2C {return ('_due_awaitResultI2C')}
  local 'result' ('[data:makeList]')
  local 'startT' (millisOp)
  comment 'Receive data until either the next prompt character or a timeout and return the result'
  repeatUntil ((millisSince startT) > 1000) {
    local 'buf' ('[serial:dueRecv]')
    if ((size buf) != 0) {
      for byte buf {
        '[data:addLast]' byte result
      }
      if ('_due_endsWithPrompt' result) {
        comment 'Result ends DUE prompt sequence: 10, 13, 62'
        repeat 3 {
          '[data:delete]' 'last' result
        }
        exitLoop
      }
    }
    waitMicros 5
  }
  return ('[data:convertType]' result 'string')
}

to '_due_awaitResultI2C' {
  local 'result' (newList 20)
  '[data:delete]' 'all' result
  local 'buf' ('[data:newByteArray]' 32)
  local 'startT' (millisOp)
  repeatUntil ((millisSince startT) > 100) {
    '[sensors:i2cRead]' 82 buf
    for byte buf {
      if (byte != 255) {'[data:addLast]' byte result}
    }
    if ('_due_endsWithPrompt' result) {
      comment 'Result ends DUE prompt sequence: 13, 10, 62'
      repeat 3 {
        '[data:delete]' 'last' result
      }
      exitLoop
    }
  }
  return ('[data:convertType]' result 'string')
}

to '_due_endsWithPrompt' buffer {
  local 'end' (size buffer)
  if (end < 3) {
    return (booleanConstant false)
  }
  return (and (or ((at end buffer) == 62) ((at end buffer) == 36)) (and ((at (end - 1) buffer) == 10) ((at (end - 2) buffer) == 13)))
}

to '_due_send' s {
  comment 'Clear receive buffer.'
  if _dueUseI2C {
    '[sensors:i2cRead]' 82 ('[data:newByteArray]' 64)
  } else {
    local 'trash' ('[serial:dueRecv]')
  }
  if _dueUseI2C {
    comment 'Assume command is < 64 bytes for now.'
    '[sensors:i2cWrite]' 82 ('[data:join]' ('[data:asByteArray]' s) ('[data:unicodeString]' 10))
  } else {
    s = ('[data:convertType]' s 'string')
    local 'i' 1
    repeatUntil (i > (size s)) {
      local 'sent' ('[serial:dueSend]' s i)
      i += sent
      waitMillis ((sent / 10) + 1)
    }
    i += ('[serial:dueSend]' ('[data:unicodeString]' 10) 1)
    waitMillis 2
  }
}

to '_due_templateWith' s optionalArgs {
  local 'parts' ('[data:split]' s '%')
  local 'result' ('[data:makeList]')
  for i ((size parts) - 1) {
    '[data:addLast]' (at i parts) result
    '[data:addLast]' (argOrDefault (i + 1) '') result
  }
  '[data:addLast]' (at 'last' parts) result
  return ('[data:joinStrings]' result)
}

to due_connected {
  local 'n' ('[data:convertType]' (random 1 9) 'string')
  return ((due_runWithResult n) == n)
}

to due_run cmd {
  '_due_send' cmd
  local 'ignore' ('_due_awaitResult')
}

to due_runWithResult cmd {
  '_due_send' cmd
  waitMillis 5
  return ('_due_awaitResult')
}

to due_useI2C useI2C {
  _dueUseI2C = useI2C
}


module 'DUELink.Button'
author 'GHI Electronics'
version 0 1 
depends DUELink 
description 'DUELink.Button'

  spec 'r' 'due_btndown' 'Button down on pin _' 'num' 20
  spec 'r' 'due_btnup' 'Button up on pin _' 'num' 20
  spec ' ' 'due_btnen' 'Button enable on pin _ enable _ pull _' 'num bool num' 20 true 2

to due_btndown pin {
  return ('[data:convertType]' (due_runWithResult ('_due_templateWith' 'btndown(%)' pin)) 'number')
}

to due_btnen pin enable pull {
  due_run ('_due_templateWith' 'btnen(%,%,%)' pin enable pull)
}

to due_btnup pin {
  return ('[data:convertType]' (due_runWithResult ('_due_templateWith' 'btnup(%)' pin)) 'number')
}


module 'DUELink.Engine'
author 'GHI Electronics'
version 0 1 
description 'DUELink Engine library'

  spec ' ' 'due_sel' 'Select _' 'num' 1
  spec ' ' 'due_stop' 'Stop'
  spec ' ' 'due_exec' 'Run _' 'str' 'statled(100,100,5)'
  spec ' ' 'Record' 'Record script _' 'auto' 'statled(100,100,10)'
  spec 'r' 'Read script' 'Read script'

to 'Read script' {
  return (due_runWithResult 'list')
}

to Record script {
  due_exec 'new'
  due_exec 'pgmbrst()'
  '[sensors:i2cWrite]' 82 ('[data:asByteArray]' script)
}

to due_exec cmd {
  '_due_send' cmd
  local 'ignore' ('_due_awaitResult')
}

to due_sel n {
  due_exec ('_due_templateWith' 'sel(%)' n)
}

to due_stop {
  comment 'Send escape to stop any running scripts'
  due_exec ('[data:unicodeString]' 27)
  comment 'Ensure that we are in Immediate mode'
  due_exec '>'
}


module 'DUELink.Frequency'
author 'GHI Electronics'
version 0 1 
depends DUELink 
description 'DUELink.Frequency'

  spec ' ' 'Frequency' 'Frequency pin _ frequency _ Hz duration _ dutycycle _' 'auto auto auto auto' 7 1000 500 '0.5'

to Frequency pin frequency duration dutycycle {
  due_run ('_due_templateWith' 'freq(%,%,%,%)' pin frequency duration dutycycle)
}


module 'DUELink.Graphics'
author 'GHI Electronics'
version 0 1 
depends DUELink 
description ''
variables x 

  spec ' ' 'Show' 'Show'
  spec ' ' 'Text2' 'Text _ color _ x _ y _' 'str auto auto auto' 'DUELink' '1' '10' '10'
  spec ' ' 'Rect' 'Rect color _ x _ y _ width _ height _' 'auto auto auto auto auto' 1 0 0 '10' '10'
  spec ' ' 'Clear' 'Clear color _' 'auto' 0
  spec ' ' 'Circle' 'Circle color _ x _ y _ radius _' 'auto auto auto auto' 1 20 20 '10'
  spec ' ' 'TextS' 'Text Scale _ color _ x _ y _ scale width _ scale height _' 'auto str str str str str' 'DUELink' '1' '10' '10' '10' '10'
  spec ' ' 'TextT' 'Text Tiny _ color _ x _ y _' 'auto auto auto auto' 'DUELink' 1 '10' '10'
  spec ' ' 'Configuration' 'Graphics config type _ array _ width _ height _ mode _' 'auto auto auto auto auto' 1 '0x3c' 128 64 1
  spec ' ' 'DrawImageB' 'DrawImageB _ color _ x _ y _ width _ height _' 'auto auto auto auto auto auto' '0,1,255,255' 1 '10' '10' 2 2
  spec ' ' 'Fill' 'Fill color _ x _ y _ width _ height _' 'auto auto auto auto auto' 1 '10' '10' '10' '10'
  spec ' ' 'Text' 'Line color _ x1 _ y1 _ x2 _ y2 _' 'auto auto auto auto auto' 1 '10' '10' 20 20
  spec ' ' 'DrawImage' 'DrawImage array _ x _ y _ width _ height _ transform _ scale width _ scale height _' 'auto auto auto auto auto auto auto auto' '1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1' '10' '10' 4 4 0 1 1

to Circle color x y radius {
  due_run ('_due_templateWith' 'circle(%,%,%,%)' color x y radius)
}

to Clear color {
  due_run ('_due_templateWith' 'clear(%)' color)
}

to Configuration type cfg width height mode {
  comment 'Default values come from OLED 096'
  due_run ('_due_templateWith' 'gfxcfg(%,{%},%,%,%)' type cfg width height mode)
}

to DrawImage img x y width height transform 'scale width' 'scale height' {
  due_run ('_due_templateWith' 'imgs({%},%,%,%,%,%,%,%)' img x y width height transform (v 'scale width') (v 'scale height'))
}

to DrawImageB array color x y width height {
  due_run ('_due_templateWith' 'ImgB([%],%,%,%,%,%)' array color x y width height)
}

to Fill color x y width height {
  due_run ('_due_templateWith' 'fill(%,%,%,%,%)' color x y width height)
}

to Rect color x y width height {
  due_run ('_due_templateWith' 'rect(%,%,%,%,%)' color x y width height)
}

to Show {
  due_run 'show()'
}

to Text color x1 x2 y1 y2 {
  due_run ('_due_templateWith' 'line(%,%,%,%,%)' color x1 x2 y1 y2)
}

to Text2 text color x y {
  due_run ('_due_templateWith' 'text("%",%,%,%)' text color x y)
}

to TextS text color x y 'scale width' 'scale height' {
  due_run ('_due_templateWith' 'texts("%",%,%,%,%,%)' text color x y (v 'scale width') (v 'scale height'))
}

to TextT text color x y {
  due_run ('_due_templateWith' 'textt("%",%,%,%)' text color x y)
}


module 'DUELink.Sound'
author 'GHI Electronics'
version 0 1 
depends DUELink 
description 'DUELink.Sound'

  spec ' ' 'Beep' 'Beep pin _ frequency _  duration _' 'auto auto auto' 7 1000 1000
  spec ' ' 'Melody Play' 'Melody play pin _  array _' 'auto auto' 7 '2000, 100, 1000, 100'
  spec ' ' 'Melody stop' 'Melody stop pin _' 'auto' 7

to Beep pin frequency 'duration in millisecond' {
  due_run ('_due_templateWith' 'beep(%,%,%)' pin frequency (v 'duration in millisecond'))
}

to 'Melody Play' pin 'notes array in float' {
  due_run ('_due_templateWith' 'MelodyP(%,{%})' pin (v 'notes array in float'))
}

to 'Melody stop' pin {
  due_run ('_due_templateWith' 'MelodyS(%)' pin)
}


module 'LED Display' Output
author MicroBlocks
version 1 9 
choices led_imageMenu heart 'small heart' yes no happy sad confused angry asleep surprised silly fabulous meh 't-shirt' 'roller skate' duck house tortoise butterfly 'stick figure' ghost sword giraffe skull umbrella snake rabbit cow 'quarter note' 'eight note' pitchfork target triangle 'left triangle' 'chess board' diamond 'small diamond' square 'small square' scissors 
description 'Display primitives for the 5x5 LED display on the BBC micro:bit, Calliope mini and M5Atom Matrix. Boards with TFT displays (such as the Citilab ED1 or the M5Stack family) support these primitives with a simulated "fat pixel" display.'
variables _stop_scrolling_text 

  spec ' ' '[display:mbDisplay]' 'display _' 'microbitDisplay' 15237440
  spec ' ' 'led_displayImage' 'display image _ : x _ y _' 'menu.led_imageMenu num num' 'happy' 1 1
  spec ' ' '[display:mbDisplayOff]' 'clear display'
  space
  spec ' ' '[display:mbPlot]' 'plot x _ y _' 'num num' 3 3
  spec ' ' '[display:mbUnplot]' 'unplot x _ y _' 'num num' 3 3
  space
  spec ' ' 'displayCharacter' 'display character _' 'str' 'A'
  spec ' ' 'scroll_text' 'scroll text _ : pausing _ ms' 'str num' 'HELLO ROSA!' 100
  spec ' ' 'stopScrollingText' 'stop scrolling'
  space
  spec 'r' '_led_image' 'led image _' 'microbitDisplay' 15237440
  spec 'r' '_led_namedImage' '_led_namedImage _' 'menu.led_imageMenu' 'happy'
  spec 'r' '_led_imageData' '_led_imageData'
  spec ' ' 'set display color' 'set display color _' 'color'

to '_led_image' twentyFiveBitInt {
  comment 'An LED image is a 25-bit integer'
  return twentyFiveBitInt
}

to '_led_imageData' {
  return 'heart:4685802,small heart:145728,yes:2269696,no:18157905,happy:15237440,sad:18284864,confused:22348096,angry:23036241,asleep:459616,surprised:4526090,silly:25984017,fabulous:15008639,meh:2236443,t-shirt:15154043,roller skate:11534104,duck:489702,house:10976708,tortoise:359872,butterfly:29332475,stick figure:18158564,ghost:23068334,sword:4657284,giraffe:10946627,skull:15171246,umbrella:6460398,snake:469859,rabbit:16104613,cow:4685361,quarter note:7573636,eight note:7590276,pitchfork:4357813,target:4681156,triangle:1026176,left triangle:32805985,chess board:11184810,diamond:4539716,small diamond:141440,square:33080895,small square:469440,scissors:20287859,'
}

to '_led_namedImage' name {
  local 'data' ('_led_imageData')
  local 'i' ('[data:find]' name data)
  if (i == -1) {
    comment 'Name not found'
    return 0
  }
  local 'start' (('[data:find]' ':' data i) + 1)
  local 'end' (('[data:find]' ',' data i) - 1)
  return ('[data:convertType]' ('[data:copyFromTo]' data start end) 'number')
}

to displayCharacter s {
  s = ('[data:join]' '' s)
  if ((size s) == 0) {
    '[display:mbDisplayOff]'
    return 0
  }
  '[display:mbDrawShape]' ('[display:mbShapeForLetter]' (at 1 s))
}

to led_displayImage imageName optionalX optionalY {
  local 'image' imageName
  if (isType image 'string') {
    image = ('_led_namedImage' imageName)
  }
  '[display:mbDrawShape]' image (argOrDefault 2 1) (argOrDefault 3 1)
}

to scroll_text text optionalDelay {
  text = ('[data:join]' '' text)
  local 'delay' 100
  if ((pushArgCount) > 1) {
    delay = optionalDelay
  }
  _stop_scrolling_text = (booleanConstant false)
  if ('Pico:ed' == (boardType)) {
    for position (((size text) * 6) + 18) {
      if _stop_scrolling_text {return 0}
      '[display:mbDisplayOff]'
      '[tft:text]' text (17 - position) 0 (colorSwatch 125 125 125 255) 1 true
      waitMillis (delay / 2)
    }
  } else {
    for position (((size text) * 6) + 6) {
      if _stop_scrolling_text {return 0}
      for i (size text) {
        '[display:mbDrawShape]' ('[display:mbShapeForLetter]' ('[data:unicodeAt]' i text)) (((i * 6) + 2) - position) 1
      }
      waitMillis delay
    }
  }
}

to 'set display color' color {
  callCustomCommand '[display:mbSetColor]' ('[data:makeList]' color)
}

to stopScrollingText {
  _stop_scrolling_text = (booleanConstant true)
  waitMillis 10
  '[display:mbDisplayOff]'
}

