"use strict";(self.webpackChunkduelink=self.webpackChunkduelink||[]).push([[5620],{2047:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"language/dotnet","title":".NET","description":"---","source":"@site/docs/language/dotnet.mdx","sourceDirName":"language","slug":"/language/dotnet","permalink":"/docs/language/dotnet","draft":false,"unlisted":false,"editUrl":"https://github.com/ghi-electronics/duelink-website/tree/dev/docs/language/dotnet.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"JavaScript","permalink":"/docs/language/javascript"},"next":{"title":"MicroBlocks","permalink":"/docs/language/microblocks"}}');var s=i(4848),l=i(8453);const t={},a=".NET",o={},d=[{value:"Setup",id:"setup",level:2},{value:"Libraries",id:"libraries",level:2},{value:"Blinky!",id:"blinky",level:2},{value:"Daisylinking",id:"daisylinking",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"net",children:".NET"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"/img/cSharp.png",alt:".NET C#"})}),"\n",(0,s.jsx)(n.p,{children:"The .NET DUELink library allows full .NET programs to access physical sensors and actuators. This allows complex .NET programs to do all the heavy lifting.s."}),"\n",(0,s.jsx)(n.p,{children:"Note that the provided library is implemented in C# but the user can use any .NET system, such as Visual Basic."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsx)(n.p,{children:"This page assumes the user is already familiar with .NET C# and there is a development machine that is already setup to build and run .NET programs."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Make sure your hardware is updated with the latest firmware. The ",(0,s.jsx)(n.a,{href:"../console",children:"Console"})," is handy for that."]})}),"\n",(0,s.jsx)(n.p,{children:"Start a new project with a simple line of code to test that the project is running."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"C# Top level statements feature is being utilized, but not required."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'Console.WriteLine("Hello, World!");\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"libraries",children:"Libraries"}),"\n",(0,s.jsxs)(n.p,{children:["Download and install the latest ",(0,s.jsx)(n.code,{children:"GHIElectronics.DUELink"})," library from NuGet.org."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"blinky",children:"Blinky!"}),"\n",(0,s.jsx)(n.p,{children:"Our first program will blink the on-board status LED, on for 200ms then it shuts off for 800ms, and does this 20 times."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'using GHIElectronics.DUELink;\r\nConsole.WriteLine("Hello DUE!");\r\nvar availablePort = DUELinkController.GetConnectionPort();\r\nvar duelink = new DUELinkController(availablePort);\r\n\r\n// Flash the LED  (on for 200ms, off for 800ms, 20 times)\r\n// Note that "Device 1" is automatically selected\r\nduelink.System.Statled(200, 800, 20);\r\nConsole.WriteLine("Bye DUE!");\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["The .NET library is open source: ",(0,s.jsx)(n.a,{href:"https://github.com/ghi-electronics/duelink-libraries",children:"DUELink Libraries Repo"}),"."]})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"daisylinking",children:"Daisylinking"}),"\n",(0,s.jsx)(n.p,{children:"In the example below, we'll use .NET to control an OLED 0.96 Display, a Button, and a Buzzer module Daisylinked together."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"/img/usbhook-daisylinked.png",alt:"Daisylinked Modules"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Make sure these modules are loaded with ",(0,s.jsx)(n.a,{href:"../engine/drivers",children:"Drivers"}),"."]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:'using GHIElectronics.DUELink;\r\n\r\nvar availablePort = DUELinkController.GetConnectionPort();\r\nvar duelink = new DUELinkController(availablePort);\r\n\r\nstatic void BasicExample() {\r\n     // Device 1 is Display OLDE 0.96, with driver installed! \r\n     // Device 2 is button\r\n     // device 3 is buzzer\r\n     duelink.ReadTimeout = TimeSpan.FromMilliseconds(100);\r\n     duelink.Engine.Select(1);\r\n     duelink.Graphics.Clear(1);\r\n     duelink.Graphics.Text("DUELink", 0, 10, 10);\r\n     duelink.Graphics.Text("Press button on", 0, 1, 21);\r\n     duelink.Graphics.Text("device 2 to play", 0, 1, 31);\r\n     duelink.Graphics.Text("sound on device 3", 0, 1, 41);   \r\n     duelink.Graphics.Show();\r\n \r\n     duelink.Engine.Select(2);\r\n     duelink.Button.Enable(1, true, 1);\r\n \r\n     while (true) {\r\n         duelink.Engine.Select(2);\r\n         if (duelink.Button.Down(1)) {\r\n             duelink.Engine.Select(3);\r\n             duelink.Frequency.Write(7, 1000, 50, 0.5);\r\n         }\r\n         Thread.Sleep(100);\r\n     }\r\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);