"use strict";(self.webpackChunkduelink=self.webpackChunkduelink||[]).push([[9328],{9181:(e,i,o)=>{o.r(i),o.d(i,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>t});const n=JSON.parse('{"id":"language/microblocks","title":"MicroBlocks","description":"---","source":"@site/docs/language/microblocks.mdx","sourceDirName":"language","slug":"/language/microblocks","permalink":"/docs/language/microblocks","draft":false,"unlisted":false,"editUrl":"https://github.com/ghi-electronics/duelink-website/tree/dev/docs/language/microblocks.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":".NET","permalink":"/docs/language/dotnet"},"next":{"title":"MakeCode","permalink":"/docs/language/makecode"}}');var r=o(4848),s=o(8453);const c={},l="MicroBlocks",a={},t=[{value:"MicroBlocks on micro",id:"microblocks-on-micro",level:2},{value:"Standalone with MicroBlocks",id:"standalone-with-microblocks",level:2},{value:"Supported Blocks",id:"supported-blocks",level:2},{value:"Available Services",id:"available-services",level:2},{value:"Smiley!",id:"smiley",level:2},{value:"Daisylinking",id:"daisylinking",level:2}];function d(e){const i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",p:"p",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"microblocks",children:"MicroBlocks"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/microblocks.png",alt:"MicroBlocks"})}),"\n",(0,r.jsxs)(i.p,{children:["MicroBlocks is a fantastic options for users who enjoy block-coding. There are two supported ways to benefit from MicroBlocks, by using a ",(0,r.jsxs)(i.a,{href:"../hw/microbit",children:["micro",":bit"]})," or running ",(0,r.jsx)(i.a,{href:"./standalone",children:"standalone"})," with MicroBlocks firmware!"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsxs)(i.h2,{id:"microblocks-on-micro",children:["MicroBlocks on micro",":bit"]}),"\n",(0,r.jsxs)(i.p,{children:["In theory, you can use any board (any host) that is supported by MicroBlocks. But we will focus on using ",(0,r.jsxs)(i.a,{href:"../hw/microbit",children:["micro",":bit"]}),"."]}),"\n",(0,r.jsxs)(i.p,{children:["To connect DUELink modules, you need an accessory that adds a JST connector to micro",":bit",". See ",(0,r.jsxs)(i.a,{href:"../hw/microbit",children:["micro",":bit"]})," for options, including ",(0,r.jsx)(i.a,{href:"../catalog/accessory/linkbit",children:"LinkBit"}),"."]}),"\n",(0,r.jsxs)(i.p,{children:["Create a MicroBlocks project on ",(0,r.jsx)(i.a,{href:"https://microblocks.fun/run/",children:"https://microblocks.fun/run/"}),", or download the local version for ",(0,r.jsx)(i.a,{href:"https://microblocks.fun/download",children:"MicroBlocks' Downloads"})," page."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/microblocks-ide.png",alt:"MicroBlocks IDE"})}),"\n",(0,r.jsxs)(i.p,{children:["Run any simple block samples to make sure that micro",":bit",' is configured properly. You are now ready for the "Daisylinking" section below.']}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"standalone-with-microblocks",children:"Standalone with MicroBlocks"}),"\n",(0,r.jsxs)(i.p,{children:["This option turns a DUELink module into a host that runs ",(0,r.jsx)(i.a,{href:"../language/standalone",children:"Standalone"}),". This gives any DUELink module a native block-coding option."]}),"\n",(0,r.jsxs)(i.p,{children:["While MicroBlocks can be loaded on the entire catalog of DUELink modules, it shines best on one of the Microcomputers, such as ",(0,r.jsx)(i.a,{href:"../catalog/microcomputer/duestem",children:"DueSTEM"})," and ",(0,r.jsx)(i.a,{href:"../catalog/microcomputer/clipit",children:"Clipit"}),"."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/catalog/duestem-front.png",alt:"DueSTEM"})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/catalog/clipit-front.png",alt:"Clipit"})}),"\n",(0,r.jsxs)(i.p,{children:["It also works great on ",(0,r.jsx)(i.a,{href:"../catalog/microcomputer/cincobit",children:"CincoBit"})," and ",(0,r.jsx)(i.a,{href:"../catalog/microcomputer/pixobit",children:"PixoBit"})," as micro",":bit-style"," options."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/cincobit-pixobit.png",alt:"CincoBit & PixoBit"})}),"\n",(0,r.jsxs)(i.p,{children:["To use the MicroBlocks Engine, replace the default DUELink firmware with the MicroBlocks firmware. All options are already built in the ",(0,r.jsx)(i.a,{href:"../console",children:"Console"}),". In short, put the board in loader mode by pressing A or LDR button, or by placing the jumper, and then reset the board while doing so. If there is no reset button on your board then simply power cycle the board."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/ldr-a-pads.png",alt:"LDR, A, pads"})}),"\n",(0,r.jsxs)(i.p,{children:["Visit ",(0,r.jsx)(i.a,{href:"https://console.duelink.com/",children:"https://console.duelink.com/"})," and click ",(0,r.jsx)(i.code,{children:"Firmware"})," on the top menu."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/due-firmware.png",alt:"DUELink Console Firmware Menu"})}),"\n",(0,r.jsxs)(i.p,{children:["You can now connect to ",(0,r.jsx)(i.code,{children:"DFU in FS Mode"})," device then select the ",(0,r.jsx)(i.code,{children:"MicroBlocks"})," from the available options. If you do not see ",(0,r.jsx)(i.code,{children:"DFU in FS Mode"})," then the board is not in loader mode. Go to the ",(0,r.jsx)(i.a,{href:"../loader",children:"loader"})," page and make sure the board is in the loader mode."]}),"\n",(0,r.jsx)(i.p,{children:"Once the firmware is loaded, power cycle the board. You are now ready for MicroBlocks."}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"supported-blocks",children:"Supported Blocks"}),"\n",(0,r.jsx)(i.p,{children:"The MicroBlocks firmware for DUELink supports most blocks. You will be able to read/write digital pins, read analog inputs, and write PWM pins."}),"\n",(0,r.jsxs)(i.p,{children:["Pins numbers are mapped to match the DUELink official mapping; however, the pins are mapped to match micro",":bit"," edge connector on ",(0,r.jsx)(i.a,{href:"../catalog/microcomputer/cincobit",children:"CincoBit"})," and ",(0,r.jsx)(i.a,{href:"../catalog/microcomputer/pixobit",children:"PixoBit"}),"."]}),"\n",(0,r.jsxs)(i.p,{children:["Capacitive touch is also supported on modules like ",(0,r.jsx)(i.a,{href:"../catalog/microcomputer/clipit",children:"Clipit"})," and on the large three pads on ",(0,r.jsx)(i.a,{href:"../catalog/microcomputer/cincobit",children:"CincoBit"})," and ",(0,r.jsx)(i.a,{href:"../catalog/microcomputer/pixobit",children:"PixoBit"}),'. Reading the level of "capacitive-ness" is done by charging a pin and then measuring the discharge time.']}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/microblocks-captouch.png",alt:"MicroBlocks Cap Touch"})}),"\n",(0,r.jsx)(i.admonition,{type:"tip",children:(0,r.jsx)(i.p,{children:"Code samples like the one above that don't require an external library can be dragged directly into the MicroBlocks IDE."})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"available-services",children:"Available Services"}),"\n",(0,r.jsxs)(i.p,{children:["It is very important to note that once a DUELink board is loaded with MicroBlocks firmware then it becomes 100% reliant on what blocks/libraries/services are offered by MicroBlocks. In other words, you lose the ",(0,r.jsx)(i.a,{href:"../engine/stdlib",children:"Standard Library"}),"."]}),"\n",(0,r.jsxs)(i.p,{children:["For example, while you can load MicroBlocks on ",(0,r.jsx)(i.a,{href:"../catalog/storage/sd-card",children:"SD Card"})," module, you do not have SD card drivers nor file system libraries!"]}),"\n",(0,r.jsxs)(i.p,{children:["This is not a problem in a standard DUELink setup as you will usually have the recommended ",(0,r.jsx)(i.a,{href:"../catalog/microcomputer/cincobit",children:"CincoBit"})," or ",(0,r.jsx)(i.a,{href:"../catalog/microcomputer/pixobit",children:"PixoBit"})," loaded with MicroBlocks but then you have other modules ",(0,r.jsx)(i.a,{href:"../engine/daisylink",children:"daisylinked"})," on its downlink connector. Those other modules will still be running the standard DUElink firmware. In this case the SD Card module will have the necessary standard libraries, which are commanded by the MicroBlocks firmware."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/cincobit-sdcard.png",alt:"Cincobit and SD Card"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"smiley",children:"Smiley!"}),"\n",(0,r.jsxs)(i.p,{children:["Assuming you using a ",(0,r.jsx)(i.a,{href:"../catalog/microcomputer/cincobit",children:"CincoBit"}),", and you have it loaded with MicroBlocks firmware, we will show a smiley face on the LEDs."]}),"\n",(0,r.jsxs)(i.p,{children:["Use the online interface at ",(0,r.jsx)(i.a,{href:"https://microblocks.fun/run/",children:"https://microblocks.fun/run/"})," or download the MicroBlocks software locally from their ",(0,r.jsx)(i.a,{href:"https://microblocks.fun/download",children:"download"})," page."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/microblocks-download.png",alt:"Download"})}),"\n",(0,r.jsx)(i.p,{children:"Install the MicroBlocks software."}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/microblocks-install.png",alt:"Install"})}),"\n",(0,r.jsx)(i.p,{children:"Plug in the DUELink hardware, the IDE will automatically connect to the device."}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/microblocks-connect.png",alt:"Connect"})}),"\n",(0,r.jsxs)(i.p,{children:["Now we're ready for some block-coding!. Click on the ",(0,r.jsx)(i.code,{children:"Add Library"})," button and Open the ",(0,r.jsx)(i.code,{children:"LED Display"}),". This will add the 5x5 LED Matrix block."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/microblocks-library.png",alt:"Connect"})}),"\n",(0,r.jsx)(i.p,{children:"Click on the block itself it will activate the LEDs on CincoBit. Any changes we make are instantly transferred to the device."}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/microblocks-instant.gif",alt:"Smile and Frown"})}),"\n",(0,r.jsx)(i.p,{children:'This program will switch from a "smile" to a "frown" based the pressed button.'}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/microblocks-smile-frown.gif",alt:"Smile and Frown"})}),"\n",(0,r.jsx)(i.admonition,{type:"tip",children:(0,r.jsxs)(i.p,{children:["MicroBlocks maps pins to match DUELink standard pin mapping on all modules, but it will map the pins on PixoBit and CincoBit edge connector to match micro",":bit","."]})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"daisylinking",children:"Daisylinking"}),"\n",(0,r.jsxs)(i.p,{children:["A user can easily ",(0,r.jsx)(i.a,{href:"../engine/daisylink",children:"Daisylink"})," several modules. In this example, the MicroBlocks special firmware is loaded on ",(0,r.jsx)(i.a,{href:"../catalog/microcomputer/pixobit",children:"PixoBit"}),". The MicroBlocks website/app can now be used to program a PixoBit, which is then commanding the other modules in the link."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/pixobit-daisylinked.png",alt:"PixoBit Daisylinked"})}),"\n",(0,r.jsx)(i.admonition,{type:"tip",children:(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.a,{href:"../engine/daisylink",children:"Daisylinked"})," modules do not need to be loaded with the MicroBlocks firmware. Only ",(0,r.jsx)(i.code,{children:"PixoBit"})," (first module) is loaded with MicroBlocks firmware in this example."]})}),"\n",(0,r.jsxs)(i.p,{children:["When Daisylinking DUELink modules users need to download the DUELink libraries for MicroBlocks from the ",(0,r.jsx)(i.a,{href:"/docs/downloads",children:"Downloads"})," page."]}),"\n",(0,r.jsxs)(i.p,{children:["Once downloaded, add it to the MicroBlocks' IDE by clicking ",(0,r.jsx)(i.code,{children:"Add Library"})," from the side menu. Select ",(0,r.jsx)(i.code,{children:"Computer"})," from the options and navigate to the appropriate file."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/microblocks-add-duelink.png",alt:"Add DUELink Library"})}),"\n",(0,r.jsxs)(i.p,{children:["This will add all the necessary blocks to control ",(0,r.jsx)(i.a,{href:"../engine/daisylink",children:"Daisylinked"})," modules."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/microblocks-duelink-library.png",alt:"New DUELink Blocks"})}),"\n",(0,r.jsx)(i.p,{children:"In the example below, we'll use MicroBlocks to control an OLED 0.96 Display, a Button, and a Buzzer module Daisylinked together."}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{src:"/img/cincobit-daisylinked.png",alt:"New DUELink Blocks"})}),"\n",(0,r.jsxs)(i.p,{children:["Click on the image below to download the code, drag the downloaded ",(0,r.jsx)(i.code,{children:".ubp"})," file into the MicroBlocks IDE. This also brings in all the necessary libraries in the project."]}),"\n",(0,r.jsx)("a",{download:!0,href:"/code/samples/microblocks/microblock_microbit_example_chain.ubp",children:(0,r.jsx)(i.img,{src:"/img/microblocks-daisylinked.png",alt:"Daisylinked MicroBlocks Project"})}),"\n",(0,r.jsx)(i.admonition,{type:"tip",children:(0,r.jsxs)(i.p,{children:["When saving projects to share with others, use the file save feature in MicroBlocks. Saving ",(0,r.jsx)(i.code,{children:"picture of script"})," as .png option won't work when using externally loaded libraries like DUELink."]})})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);