"use strict";(self.webpackChunkduelink=self.webpackChunkduelink||[]).push([[2762],{1875:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"engine/scripting","title":"Scripting Language","description":"---","source":"@site/docs/engine/scripting.mdx","sourceDirName":"engine","slug":"/engine/scripting","permalink":"/docs/engine/scripting","draft":false,"unlisted":false,"editUrl":"https://github.com/ghi-electronics/duelink-website/tree/dev/docs/engine/scripting.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Internal Engine","permalink":"/docs/engine/intro"},"next":{"title":"Standard Library","permalink":"/docs/engine/stdlib"}}');var s=i(4848),a=i(8453);const t={},l="Scripting Language",d={},c=[{value:"Print",id:"print",level:2},{value:"Comments",id:"comments",level:2},{value:"Whitespace",id:"whitespace",level:2},{value:"Variables",id:"variables",level:2},{value:"Arrays",id:"arrays",level:2},{value:"Int vs Float",id:"int-vs-float",level:2},{value:"Functions",id:"functions",level:2},{value:"Operands",id:"operands",level:2},{value:"while-loop",id:"while-loop",level:2},{value:"For-Loop",id:"for-loop",level:2},{value:"Break &amp; Continue",id:"break--continue",level:2},{value:"If-Statement",id:"if-statement",level:2},{value:"Labels",id:"labels",level:2},{value:"Goto",id:"goto",level:2},{value:"Multi-Command-Line",id:"multi-command-line",level:2},{value:"Aliases",id:"aliases",level:2}];function o(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"scripting-language",children:"Scripting Language"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["The DUELink Scripting Language runs internally on any DUELink Hardware. The scripts are used to extend and tunnel in the commands from a ",(0,s.jsx)(n.a,{href:"../language/intro",children:"Coding Language"})," such as ",(0,s.jsx)(n.a,{href:"/docs/language/python",children:"Python"}),", which is running on a",(0,s.jsx)(n.a,{href:"../hw/intro",children:"Supported Hardware"}),", such as ",(0,s.jsx)(n.a,{href:"../hw/raspberry-pi",children:"Raspberry Pi"}),". It can also be used to run the modules ",(0,s.jsx)(n.a,{href:"../language/standalone",children:"Standalone"}),", independent from any host."]}),"\n",(0,s.jsx)(n.p,{children:"Scripts are not case sensitive, with a simple syntax that is inspired by BASIC and Python. The power of DUELink Scripts comes from its simplicity, rather than from its feature set. This is the perfect language to teach someone coding and to extend DUELink modules with additional functionality."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Even though the scripting engine is not case sensitive, we use ",(0,s.jsx)(n.code,{children:"Print()"})," rather than ",(0,s.jsx)(n.code,{children:"print()"})," or ",(0,s.jsx)(n.code,{children:"prInT()"})," to keep things looking great!"]})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"print",children:"Print"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Print()"})," is a function that prints (outputs) the passed arguments. These arguments can be variables, strings, or equations. ",(0,s.jsx)(n.code,{children:"Print()"})," can handle multiple arguments."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"PrintLn()"})," is exactly the same except it adds line break at the end."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'x=100\r\nPrintLn(x)\r\nPrintLn("Hello World")\r\nPrintLn(x+x)\r\nPrintLn(x,"Hello World", x+x)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"/img/print-output.png",alt:"Print"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Print()"})," also supports printing arrays. When it sees a float array, such as ",(0,s.jsx)(n.code,{children:"Print(a1)"})," or ",(0,s.jsx)(n.code,{children:"Print({22.4,66.5})"})," the output will be a dump of the array values, ",(0,s.jsx)(n.code,{children:"{22.4,66.5}"}),' in the later example. However, when it sees a byte array, it will print the ASCII values. Print("Hello DUELink") will show "Hello DUELink". This also applies to byte array variables and constants. ',(0,s.jsx)(n.code,{children:"Print([0x55])"})," will result in ",(0,s.jsx)(n.code,{children:"U"})," because ",(0,s.jsx)(n.code,{children:"0x55"})," is ASCII for the letter ",(0,s.jsx)(n.code,{children:"U"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This is an example on how to dump the values of a byte array, resulting in something similar to what print does with float arrays."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'fn DumpBA(b0)\r\n  Print("[")\r\n  for i in Range(Len(b0)\r\n    Print(b0[i],",")\r\n  next\r\n  Print("]")\r\nfend\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"comments",children:"Comments"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"#"})," character is used to identify a comment. Comments are ignored by the program, text added to help developers understand the code."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# This is a comment\r\nx=10\r\nPrint(x) # This is also a comment\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"whitespace",children:"Whitespace"}),"\n",(0,s.jsxs)(n.p,{children:["Space doesn't mean anything to the DUELink Scripting Language. However, new lines (or ",(0,s.jsx)(n.code,{children:":"}),") are important to start new commands."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'Print   ( "DUELink"   )\n'})}),"\n",(0,s.jsx)(n.p,{children:"Is exactly the same as"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'Print("DUELink")\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,s.jsxs)(n.p,{children:["DUELink Script has a fixed set of 26 global float-type variables, one for each letter, assigned to ",(0,s.jsx)(n.code,{children:"_a"})," to ",(0,s.jsx)(n.code,{children:"_z"}),". To use a global variable, simply use ",(0,s.jsx)(n.code,{children:"_x=5.5"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"There are also local variables used in functions, still float-type. More on these under functions."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"arrays",children:"Arrays"}),"\n",(0,s.jsxs)(n.p,{children:["There are 10 float-type arrays and 10 byte-type arrays. The float arrays are named a0 to a9 and the byte arrays are names b0 to b9. All arrays are size zero by default. Use ",(0,s.jsx)(n.code,{children:"Dim"})," to allocate memory for an array, like ",(0,s.jsx)(n.code,{children:"Dim b1[10]"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["Coding language libraries, such as Python, may need to use internal DUELink Script buffers. The use of ",(0,s.jsx)(n.code,{children:"B8"}),"/",(0,s.jsx)(n.code,{children:"B9"})," byte-array and  ",(0,s.jsx)(n.code,{children:"A8"}),"/",(0,s.jsx)(n.code,{children:"A9"})," float-array are reserved for libraries. Do not use in scripts nor drivers."]})}),"\n",(0,s.jsxs)(n.p,{children:["Similar to other common languages, elements of an ",(0,s.jsx)(n.strong,{children:"byte"})," array are accessed using ",(0,s.jsx)(n.code,{children:"[]"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This is an example that uses both, global variables and arrays:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"Dim b1[10]\r\n\r\nFor _i=0 to 9\r\n  b1[_i]=_i*2\r\nNext\r\n\r\nFor _i=0 to 9\r\n  PrintLn(b1[_i])\r\nNext\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output will look like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"0\r\n2\r\n4\r\n6\r\n8\r\n10\r\n12\r\n14\r\n16\r\n18\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"Dim b1[0]"})," to free up the memory reserved for array ",(0,s.jsx)(n.code,{children:"b1[]"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"Same goes for float arrays."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"Dim a1[10]\r\n\r\nfor _i=0 to 9\r\n  a1[_i]=_i* 0.3\r\nnext\r\n\r\nfor _i=0 to 9\r\n  PrintLn(a1[_i])\r\nnext\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output will look like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"0\r\n0.3\r\n0.6\r\n0.9\r\n1.2\r\n1.5\r\n1.8\r\n2.1\r\n2.4\r\n2.7\n"})}),"\n",(0,s.jsx)(n.p,{children:"Arrays can be initialized in two different ways."}),"\n",(0,s.jsx)(n.p,{children:"Declare an array and initialize it with values at the same time."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"Dim b1[6] = [1,2,\r\n            3,4,\r\n            5,6]\r\nfor _i in Range(Len(b1))\r\n  PrintLn(b1[_i])\r\nnext\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Len(b1)"})," returns the length (size) of the b1 array."]})}),"\n",(0,s.jsx)(n.p,{children:"The second way is to create the array first, then populate it later."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"Dim b1[6]\r\n\r\nb1 = [7,8,\r\n     9,10,\r\n     11,12]\r\nfor _i in Range(Len(b1))\r\n  PrintLn(b1[_i])\r\nnext\n"})}),"\n",(0,s.jsxs)(n.p,{children:["DUELink scripts use ",(0,s.jsx)(n.code,{children:"{}"})," for float arrays initializers, instead of ",(0,s.jsx)(n.code,{children:"[]"}),", which is used for byte arrays. The previous example will change to this."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"Dim a1[6]\r\n\r\na1 = {7,8,\r\n     9,10,\r\n     11,12}\r\nfor _i in Range(Len(a1))\r\n  PrintLn(a1[_i])\r\nnext\n"})}),"\n",(0,s.jsx)(n.p,{children:"There are some specific things we must know about initializing arrays:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Multi-line initializers must have a comma ending the line if the following line will have more data for the initializer (see the examples above)."}),"\n",(0,s.jsxs)(n.li,{children:["It is possible to start initialization values on a new line after ",(0,s.jsx)(n.code,{children:"{"})," and then ",(0,s.jsx)(n.code,{children:"}"})," at the end of the last item."]}),"\n",(0,s.jsx)(n.li,{children:'Multi-line initializers can only be used in "record" mode. In immediate mode, the initializer must be on a single line.'}),"\n",(0,s.jsx)(n.li,{children:"Initializers are always run, so if the initializer is inside a loop every time the dim or assignment initializer is encountered it will reinitialize the data in the array."}),"\n",(0,s.jsxs)(n.li,{children:["You can have fewer values in the initializer than what the array holds, but you cannot have more. You will get an error indicating that a ",(0,s.jsx)(n.code,{children:"]"})," was expected if there are too many elements in the initializer."]}),"\n",(0,s.jsx)(n.li,{children:"Since we do not want to do too many dynamic allocations, the size of the array must be specified when using dim even when initializing the array."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Dim"})," will automatically set the appropriate size when it sees an initializer, like `Dim a1[] = [1,2,3,4,5]' will create an arrays with 5 elements."]})}),"\n",(0,s.jsxs)(n.p,{children:["It is also possible to initialize an array with a string of text. The line ",(0,s.jsx)(n.code,{children:'dim b1[]="GHI"'})," will set b1[0] to ASCII ",(0,s.jsx)(n.code,{children:"G"})," and so on. The system automatically know if bytes or floats are needed and create the array properly. Note that this is not a string in its true meaning, but a simply way to initialize an array with ASCII characters."]}),"\n",(0,s.jsxs)(n.p,{children:["A few escape codes are available with strings-like initializer, similar to the ones in the C language ",(0,s.jsx)(n.code,{children:"\\r"}),", ",(0,s.jsx)(n.code,{children:"\\n"}),", ",(0,s.jsx)(n.code,{children:"\\t"}),", ",(0,s.jsx)(n.code,{children:'\\"'}),". ",(0,s.jsx)(n.code,{children:'Print("He Said: \\"I love DUELink\\"")'})," will output ",(0,s.jsx)(n.code,{children:'He Said: "I love DUELink"'}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Functions that accept arrays can take initializers as well."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"fn PrintArray(b1, c)\r\nfor _i in Range(c)\r\n  PrintLn(b1[_i])\r\nnext\r\nfend\r\n\r\nDim b1[5] = [1,2,3,4,5]\r\nPrintArray(b1, 3)\r\n\r\nPrintArray([1,2,3,4,5], 3)\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"int-vs-float",children:"Int vs Float"}),"\n",(0,s.jsx)(n.p,{children:"The DUELink system only supports byte arrays and not byte variables. All local and global variables are floats. There are cases where a user may need a 32bit int value. There are a few way to make this easier."}),"\n",(0,s.jsxs)(n.p,{children:["When using shift operator ",(0,s.jsx)(n.code,{children:"<<"})," the system will treat the float variable as an int, making ",(0,s.jsx)(n.code,{children:"1<<22"})," possible."]}),"\n",(0,s.jsxs)(n.p,{children:["Also, to carry a 32bit value, the proper way would be through using a 4 element byte-array. To simplify, DUELink engine uses ",(0,s.jsx)(n.code,{children:"0i"})," and ",(0,s.jsx)(n.code,{children:"0I"})," prefix to state a 4 element byte-array, where ",(0,s.jsx)(n.code,{children:"i"})," is little endian and ",(0,s.jsx)(n.code,{children:"I"})," is large endian. For example, ",(0,s.jsx)(n.code,{children:"0I12345678"})," is exactly same as ",(0,s.jsx)(n.code,{children:"{0x12,0x34,0x56,0x78}"})," and ",(0,s.jsx)(n.code,{children:"0i12345678"})," is exactly the same as ",(0,s.jsx)(n.code,{children:"{0x78,0x56,0xFF,0x12}"}),". The value is always 4 bytes, a ",(0,s.jsx)(n.code,{children:"0i12"})," is same as ",(0,s.jsx)(n.code,{children:"{0x12,0x00,0x00,0x00}"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"An example function that processes 32bit values:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"fn Print32(b1)\r\nfor i=0 to 4\r\n  PrintLn(hex(b1[i]))\r\nnext\r\nfend\r\n\r\nPrint32(0I12345678)\r\nPrint32({0x12,0x34,0x56,0x78}) # same as above\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsxs)(n.p,{children:["Functions start with ",(0,s.jsx)(n.code,{children:"fn"})," and end with ",(0,s.jsx)(n.code,{children:"fend"}),". Arguments must be included in the function definition."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"fn Add(a,b)\r\n  return a+b\r\nfend\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then the function can be executed using ",(0,s.jsx)(n.code,{children:"Add()"}),". This can be done from withing the script or from an external source over one of the ",(0,s.jsx)(n.a,{href:"../interface/intro",children:"Interfaces"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Here it is used by the same script."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"_x = Add(5,33)\r\nPrintLn(_x)\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"The system is limited to 16 user created functions."})}),"\n",(0,s.jsxs)(n.p,{children:["Variables inside functions are local. You can use any of the 26 letters as a variable name. The argument will automatically set the local variable with the matching name to the passed value. In the previous example, ",(0,s.jsx)(n.code,{children:"a"})," and ",(0,s.jsx)(n.code,{children:"b"})," local variables were automatically assigned with first and second argument values."]}),"\n",(0,s.jsx)(n.p,{children:"Function arguments can also be arrays. These arrays are passed as by reference."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"fn PrintArray(b1, c) # Note how the function expects the array is b1\r\nfor _i in Range(c)\r\n  PrintLn(b1[_i])\r\nnext\r\nfend\r\n\r\nDim b3[] = [1,2,3,4,5]\r\nPrintArray(b3, 3) # Note how we pass b3 array. The system will automatically reference b3 to b1, a1 used in the function.\n"})}),"\n",(0,s.jsx)(n.p,{children:"Array initializer can also be used to call the function above."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"PrintArray([1,2,3,4,5], 3) # Print 3 elements\n"})}),"\n",(0,s.jsx)(n.p,{children:"And even use a string!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'PrintArray("DUELink", 7)\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["Float array initializers use ",(0,s.jsx)(n.code,{children:"{}"})," as explained in the arrays section. Functions expecting float arrays do nto work with byte arrays, and vise vera."]})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"operands",children:"Operands"}),"\n",(0,s.jsx)(n.p,{children:"DUELink Scripting supports the following operators."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Mathematical"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Sign"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"+"})}),(0,s.jsx)(n.td,{children:"Add"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"-"})}),(0,s.jsx)(n.td,{children:"Subtract"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"*"})}),(0,s.jsx)(n.td,{children:"Multiply"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/"})}),(0,s.jsx)(n.td,{children:"Divide"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"%"})}),(0,s.jsx)(n.td,{children:"Modulus, the remainder"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Comparators"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Sign"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:">"})}),(0,s.jsx)(n.td,{children:"Greater Than"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<"})}),(0,s.jsx)(n.td,{children:"Less Than"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:">="})}),(0,s.jsx)(n.td,{children:"Greater Than or Equal To"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<="})}),(0,s.jsx)(n.td,{children:"Less Than or Equal To"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"="})}),(0,s.jsx)(n.td,{children:"Equal"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"!="})}),(0,s.jsx)(n.td,{children:"Not Equal"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Logical"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Sign"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"&&"})}),(0,s.jsx)(n.td,{children:"And"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"||"})}),(0,s.jsx)(n.td,{children:"Or"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Bitwise"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Sign"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"&"})}),(0,s.jsx)(n.td,{children:"Bitwise And"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"|"})}),(0,s.jsx)(n.td,{children:"Bitwise Or"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"^"})}),(0,s.jsx)(n.td,{children:"Bitwise XOR"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<<"})}),(0,s.jsx)(n.td,{children:"Shift Left"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:">>"})}),(0,s.jsx)(n.td,{children:"Shift Right"})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"while-loop",children:"while-loop"}),"\n",(0,s.jsxs)(n.p,{children:["This is the kind of loop that stays active as long as a condition is true. a ",(0,s.jsx)(n.code,{children:"while"})," loop block ends with ",(0,s.jsx)(n.code,{children:"wend"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"_x=10\r\nwhile _x>5\r\n  PrintLn(_x)\r\n  _x=_x-1\r\nwend\n"})}),"\n",(0,s.jsx)(n.h2,{id:"for-loop",children:"For-Loop"}),"\n",(0,s.jsxs)(n.p,{children:["The For-Loop has two different syntax styles. ",(0,s.jsx)(n.strong,{children:"BASIC"})," and ",(0,s.jsx)(n.strong,{children:"Python"})," style."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"BASIC Style"})}),"\n",(0,s.jsx)(n.p,{children:"The BASIC style For-Loop includes the last number in the range."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'# Counting Up\r\nfor _i=1 to 5\r\n  Print(_i,",")\r\nnext\n'})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"1,2,3,4,"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"# Counting Up in increments of 10\r\nfor _i=1 to 1000 Step 10\r\n  PrintLn(_i)\r\nnext\r\n\r\n# Counting Down in increments of 10\r\nfor _i=1000 to 1 Step -10\r\n  PrintLn(_i)\r\nnext\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Python Style"})}),"\n",(0,s.jsx)(n.p,{children:"The for-loop also allows a format similar to Python."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'# Range with only stop value\r\nfor _i in Range(5)\r\n  Print(_i,",")\r\nnext\n'})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"0,1,2,3,4,"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'# Range with start and stop value\r\nfor _i in Range(1,5)\r\n  Print(_i,",")\r\nnext\r\n\r\n# Range with start, stop, and step value\r\nfor _i in Range(1,5,2)\r\n  Print(_i,",")\r\nnext\r\n\r\n# Range with start, stop, and negative step value\r\nfor _i in Range(10,1,-2)\r\n  Print(_i,",")\r\nnext\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"break--continue",children:"Break & Continue"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Break"})," is available to break out of the while-loop and for-loop. Similarly ",(0,s.jsx)(n.code,{children:"continue"})," is available to send the execution back to the top of a loop."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"if-statement",children:"If-Statement"}),"\n",(0,s.jsxs)(n.p,{children:["If-Statements must end with the ",(0,s.jsx)(n.code,{children:"End"})," command."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'if _x=1\r\n  PrintLn("one")\r\nelse\r\n  PrintLn("not one")\r\nend\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If-Statements can also be nested within each other. Each If-Statement requires an ",(0,s.jsx)(n.code,{children:"End"})," command to terminate its own process."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'if _x=1\r\n  PrintLn("one")\r\nelse\r\n  if _x =2\r\n    PrintLn("two")\r\n  else\r\n    PrintLn("not one or two")\r\n  end\r\nend\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"labels",children:"Labels"}),"\n",(0,s.jsxs)(n.p,{children:["Labels are needed to redirect the program. They are used by ",(0,s.jsx)(n.code,{children:"Goto"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["A Label is created by using the ",(0,s.jsx)(n.code,{children:"@"})," symbol in front of the desired label. Labels are limited to 8 characters."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"goto",children:"Goto"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Goto"})," is useful for repeating tasks indefinitely by sending execution to a specific ",(0,s.jsx)(n.em,{children:"Label"})," name."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"@Loop\r\n# add code here that runs forever\r\nGoto Loop\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h1,{id:"exit",children:"Exit"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"exit"})," terminates the program."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Print("Hello")\r\nexit\r\nPrint("This will not get printed")\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"multi-command-line",children:"Multi-Command-Line"}),"\n",(0,s.jsxs)(n.p,{children:["Multiple commands can be combined on a single line. This is especially useful when using ",(0,s.jsx)(n.code,{children:"Immediate mode"})," where a single line is required. To use multiple command, a ",(0,s.jsx)(n.code,{children:":"})," symbol is used."]}),"\n",(0,s.jsx)(n.p,{children:"This is an example of a for loop in a single line"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"for _i=1 to 1000 step 10:PrintLn(_i):next\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"aliases",children:"Aliases"}),"\n",(0,s.jsxs)(n.p,{children:["Using aliases come allow for creating cleaner code. For example, the name ",(0,s.jsx)(n.code,{children:"temp"})," can be an alias to ",(0,s.jsx)(n.code,{children:"_t"})," variable holding temperature."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Alias()"})," is a special kind of function that adds new aliases to the system. It is not possible to remove an alias once it is added."]}),"\n",(0,s.jsx)(n.p,{children:"An alias can be used for variables, arrays, function names, and constants."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:'Dim b1[]=[65,66,67]\r\nAlias(vals=b1, doit=Test,age=23)\r\n\r\nPrintLn(age)\r\nfor i=0 to len(vals)-1\r\n  doit(vals[i], vals[i])\r\nnext\r\n\r\nfn Test(a, b)\r\n  PrintLn(a," ",b)\r\nfend\n'})}),"\n",(0,s.jsx)(n.p,{children:"Aliases are handled in flash and has no RAM usage implications; however, they degrade performance due to the need for searching available aliases."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"Because Aliases are flash-dependant, they do not work in immediate mode. However, Aliases stored in flash using recorded mode are available to immediate commands."})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);