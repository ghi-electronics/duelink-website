"use strict";(self.webpackChunkduelink=self.webpackChunkduelink||[]).push([[1089],{4939:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"engine/stream","title":"Stream","description":"---","source":"@site/docs/engine/stream.mdx","sourceDirName":"engine","slug":"/engine/stream","permalink":"/docs/engine/stream","draft":false,"unlisted":false,"editUrl":"https://github.com/ghi-electronics/duelink-website/tree/dev/docs/engine/stream.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Daisylink","permalink":"/docs/engine/daisylink"},"next":{"title":"Coprocessor","permalink":"/docs/engine/coprocessor"}}');var t=r(4848),i=r(8453);const s={},d="Stream",o={},l=[{value:"Usage",id:"usage",level:2},{value:"Mechanism",id:"mechanism",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"stream",children:"Stream"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["DUELink ",(0,t.jsx)(n.a,{href:"scripting",children:"Scripting"})," language is built to be ASCII human-friendly. This works great; however, there are instances where speed or raw binary data is required, like when writing or reading a buffer."]}),"\n",(0,t.jsxs)(n.p,{children:["A direct benefit of streams is in giving a language, such as ",(0,t.jsx)(n.a,{href:"../language/python",children:"Python"})," an easy way to transfer buffers to and from the module."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.p,{children:"This is an example to send a buffer to the module. This example is for Python but other languages work almost exactly the same."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'duelink.Stream.WriteBytes("b1", byte_array, 64) # write first 64 byte elements from byte_array to b1\r\nduelink.Stream.WriteFloats("a1", float_array, 64) # write first 64 float elements from float_array to a1\n'})}),"\n",(0,t.jsx)(n.p,{children:"Similarly, you can also read a buffer from the module."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'duelink.Stream.ReadBytes("b1", byte_array, 64) # read 64 byte elements from b1 to byte_array\r\nduelink.Stream.ReadFloats("a1", float_array, 64) # read 64 byte elements from a1 to float_array\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Stream can't be used directly by typing in ASCII commands, like when using the ",(0,t.jsx)(n.a,{href:"../console",children:"Console"})," or a terminal."]})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"mechanism",children:"Mechanism"}),"\n",(0,t.jsx)(n.p,{children:"Understanding and utilizing Stream mechanism is only needed by advanced users. See the source code of one of the provided libraries for reference."}),"\n",(0,t.jsxs)(n.p,{children:["A Stream command initiates the request. Once this command is received and accepted by the device, the ",(0,t.jsx)(n.code,{children:"&"})," symbol will be returned indicating readiness. The host can now send the entire binary data, exactly to the required byte count."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);