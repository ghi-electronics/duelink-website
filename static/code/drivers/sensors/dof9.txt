##### Distance Driver #####
## Priliminary driver. Needs improvements!

fn DVer()
    return 0.1
fend

Alias(ADXL345=0x53, HMC5883= 0x1E, ITG3200=0x68 )

fn Init()
    I2cCfg(400)
    
    #ADXL345 - Accel
    Dim b1[2] = [0x31 , 0x01]
    
    I2cWr(ADXL345, b1, 0)
    
    b1[0] = 0x2D
    b1[1] = 0x08
    I2cWr(ADXL345, b1, 0)
    
    #HMC5883 Compass
    b1[0] = 0x02
    b1[1] = 0x00
    I2cWr(HMC5883, b1, 0)
    
    #ITG3200 Gyro
    b1[0] = 0x03
    b1[1] = 0x00
    I2cWr(ITG3200, b1, 0)
    
    b1[0] = 0x15
    b1[1] = 0x07
    I2cWr(ITG3200, b1, 0)
    
    b1[0] = 0x16
    b1[1] = 0x1E
    I2cWr(ITG3200, b1, 0)
    
    b1[0] = 0x17
    b1[1] = 0x00
    I2cWr(ITG3200, b1, 0)
    
    Wait(10)
    Dim b6[6]
    Dim b2[8]
fend

fn RAccel()
    
    I2cWr(ADXL345, [0x32], 0) # write to register
    
    v = I2cWr(ADXL345, 0, b6) # read from register, b6 need 6 bytes
    
    if (v = 0)
        PrintLn("Init Accel failed")
        while (1)
        wend
    end
    _x = Convert(b6[1], b6[0])
    _y = Convert(b6[3], b6[2])
    _z = Convert(b6[5], b6[4])
fend

fn RCompass()
    
    I2cWr(HMC5883, [0x3], 0) # write to register
    
    v = I2cWr(HMC5883, 0, b6) # read from register, b2 need 6 bytes
    
    if (v = 0)
        PrintLn("Init compass failed")
        while (1)
        wend
    end
    _x = Convert(b6[0], b6[1])
    _y = Convert(b6[2], b6[3])
    _z = Convert(b6[4], b6[5])
fend

fn RGyro()
    
    I2cWr(ITG3200, [0x1B], 0) # write to register
    v = I2cWr(ITG3200, 0, b2) # read from register, b2 need 8 bytes
    
    if (v = 0)
        PrintLn("Init Gyro failed")
        while (1)
        wend
    end
    
    _x = Convert(b2[2], b2[3])
    _y = Convert(b2[4], b2[5])
    _z = Convert(b2[6], b2[7])
    _t = Convert(b2[0], b2[1])  
    _t = 35 + (_t + 13200)/280
fend

fn Convert(u,l)
    v = (u << 8) | l
    if v > 32768
        v = 65536 - v
        v = v * -1
    end
    return v
    # Here is another way to convert!
    if(u&080)
        u = (~u)& 0xff
        l = (~l)& 0xff
        return (((u<<8) | l)*-1)-1
    else
        return (u<<8) | l
    end
fend

Init()

##############################