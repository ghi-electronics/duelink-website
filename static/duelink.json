{
  "metadata": {
    "author": "GHI Electronics",
    "version": "0.4",
    "timestamp": "2025-09-07",
    "image_url_base": "https://raw.githubusercontent.com/ghi-electronics/duelink-website/refs/heads/dev/static/img/catalog/",
    "code_url_base": "https://raw.githubusercontent.com/ghi-electronics/duelink-website/refs/heads/dev/static/code/drivers/",
    "fw_url_base": "https://raw.githubusercontent.com/ghi-electronics/duelink-website/refs/heads/dev/static/bin/fw/",
    "description": "Simplified product schema with convention-based resource resolution"
  },
  "products": [
    {
      "name": "CincoBit",
      "partNumber": "GDL-MCCINCOBIT-E",
      "category": "Microcomputer",
      "price": 0,
      "tagline": "Ultra low-cost, micro:bit inspired, educational board",
      "description": "Educators and Makers will find great value in this ultra low-cost board. This is an excellent micro:bit alternative, giving you alligator clip connections and DUELink Downlink connector for Daisylinking modules.",
      "keyFeatures": [
        "5x5 LED Matrix",
        "micro:bit inspired edge connector",
        "USB-C connector",
        "Buzzer",
        "Light Sensor",
        "2x User Buttons",
        "52x42mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `GetW()` | Get display width: 5. |\n| `GetH()` | Get display height: 5. |\n| `IsColor()` | Returns 0. |\n| `BtnA()` | Returns 1 if button A is pressed. |\n| `BtnB()` | Returns 1 if button B is pressed. |\n| `IsTouch(p)` | Returns 1 if `p` pad (0, 1, or 2) is touched. |\n| `Buzzer(f,d)` | Plays buzzer to `f` frequency(50 to 15K) for `d` duration in milliseconds. |\n| `Light()` | Returns voltage from light sensor. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "ClipIt",
      "partNumber": "GDL-MCCLIPIT-B",
      "category": "Microcomputer",
      "price": 0,
      "tagline": "Alligator clip friendly STEM-microcomputer",
      "description": "Educators can now elevate their STEM-mission with Clipit. Start immediately with light sensor and touch pads to read inputs. Then use any of the supported Languages to process those inputs and then control the output on the 5x5 LED matrix and buzzer.",
      "keyFeatures": [
        "Clip Friendly Holes",
        "Capacitive Touchpads",
        "USB-C connector",
        "5x5 LED Matrix",
        "Buzzer",
        "Light Sensor",
        "120x60mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `TouchA()` | Returns 1 if A pad is touched. |\n| `TouchB()` | Returns 1 if B pad is touched. |\n| `TouchUp()` | Returns 1 if Up pad is touched. |\n| `TouchDown()` | Returns 1 if Down pad is touched. |\n| `TouchLeft()` | Returns 1 if Left pad is touched. |\n| `TouchRight()` | Returns 1 if Right pad is touched. |\n| `Buzzer(f,d)` | Plays buzzer to `f` frequency(50 to 15K) for `d` duration in milliseconds. |\n| `Light()` | Returns voltage level from light sensor. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "DueDuino",
      "partNumber": "GDL-MCDUEDUINO-A",
      "category": "Microcomputer",
      "price": 0,
      "tagline": "Arduino form factor inspired DUELink mainboard",
      "description": "Use the official DUELink engine firmware or use the Arduino software IDE to program DueDuino.",
      "keyFeatures": [
        "Arduino form factor",
        "USB-C connector",
        "PowerJack",
        "69x56mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `BtnLdr()` | Returns 1 if LDR button is pressed. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "DueSTEM",
      "partNumber": "GDL-MCDUESTEM-B",
      "category": "Microcomputer",
      "price": 0,
      "tagline": "Complete All-in-One STEM Solution",
      "description": "Input -> Process -> Output is how DueSTEM brings everything educators need to demonstrate physical computing. There are 4 inputs and 4 outputs. The graphical display can be used to show sensor levels or for building games!",
      "keyFeatures": [
        "128x64 OLED 0.96\" Display",
        "Temperature Sensor",
        "Accelerometer",
        "Light Sensor",
        "4 User Buttons",
        "Light Sensor",
        "2 Servo Ports",
        "RGB LED",
        "Tunes Buzzer",
        "107x57mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `GetW()` | Get display width: 128. |\n| `GetH()` | Get display height: 64. |\n| `IsColor()` | Returns 0. |\n| `BtnPin(a)` | Returns button's pin number, based on `a` alias ('U' = Up, 'D' = Down, 'L' = Left, 'R' = Right) |\n| `GetX()` | Returns the X axis of the Accelerometer. |\n| `GetY()` | Returns the Y axis of the Accelerometer. |\n| `GetZ()` | Returns the Z axis of the Accelerometer. |\n| `SetBulb(c)` | Sets Lightbulb `c` color with 24bit RGB color (RRGGBB). |\n| `Tunes(f,d)` | Plays Tunes buzzer to `f` frequency(50 to 15K) for `d` duration in milliseconds. |\n| `Light()` | Returns voltage level from Light sensor. |\n| `ReadTemp()` | Returns voltage level from Temperature sensor. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "PixoBit",
      "partNumber": "GDL-MCPIXOBIT-D",
      "category": "Microcomputer",
      "price": 0,
      "tagline": "micro:bit Form Factor with 128x64 OLED 0.96\"",
      "description": "PixoBit upgrades CincoBit with a graphical display. You can now show sensor data or build video games!",
      "keyFeatures": [
        "128x64 OLED 0.96\" display",
        "Light Sensor",
        "Buzzer",
        "2x User Buttons",
        "micro:bit inspired edge connector",
        "USB-C connector",
        "52x42mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `GetW()` | Get display width: 128. |\n| `GetH()` | Get display height: 64. |\n| `IsColor()` | Returns 0. |\n| `BtnUpA()` | Returns 1 if button A was released. |\n| `BtnDownA()` | Returns 1 if button A was pressed. |\n| `BtnUpB()` | Returns 1 if button B was released. |\n| `BtnDownB()` | Returns 1 if button B was pressed. |\n| `IsTouch(p)` | Returns 1 if `p` pad (0, 1, or 2) is touched. |\n| `Buzzer(f,d)` | Play buzzer with `f` frequency and `d` duration in milliseconds. This is blocking function. |\n| `Light()` | Returns voltage from light sensor. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Stamp",
      "partNumber": "GDL-MCSTAMP-A",
      "category": "Microcomputer",
      "price": 0,
      "tagline": "Seeed Xaio Form Factor DUELink Microcomputer",
      "description": "This fingertip-sized tiny board is as capable as any other DUELink module. Plug it in a breadboard using male headers, or solder it directly using the edge pads. It includes an upgraded regulator allowing for connecting many DUELink modules on the Downlink connector.",
      "keyFeatures": [
        "Seeed Xaio form factor",
        "Downlink DUELink connector",
        "USB-C connector",
        "Surface mountable",
        "24x18mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `BtnLdr()` | Returns 1 if LDR button is pressed. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Stick",
      "partNumber": "GDL-MCSTICK-A",
      "category": "Microcomputer",
      "price": 0,
      "tagline": "DIP24 Form Factor SMT DUELink SoM",
      "description": "Start making your own DUELink modules using this Surface-Mountable DUELink SoM that is also DIP24 form-factor.",
      "keyFeatures": [
        "Uplink & Downlink DUELink connectors",
        "DIP24 form factor",
        "Surface mountable SoM",
        "30.48x12.7mm overall dimension"
      ]
    },
    {
      "name": "Ghizzy Jr",
      "partNumber": "GDL-SPGHIZZYJR-A",
      "category": "Special",
      "price": 0,
      "tagline": "Tiny Robot-shaped Microcomputer",
      "description": "Is this the smallest, cutest, and smartest key chain in the world? You decide, but this is a mini robot-shaped pocket-sized microcomputer that plugs right into a USB socket!",
      "keyFeatures": [
        "2 RGB LEDs",
        "Downlink DUELink Connector",
        "PCB USB-A",
        "20x47mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Eye(l,r)` | Sets the `l` left and `r` right \"Eyes\" with 24bit RGB color (RRGGBB). |\n| `BtnLdr()` | Returns 1 if LDR button is pressed. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Ghizzy",
      "partNumber": "GDL-SPGHIZZY-B",
      "category": "Special",
      "price": 0,
      "tagline": "Robot-shaped Microcomputer",
      "description": "Advanced gaming and graphics module with enhanced capabilities",
      "keyFeatures": [
        "2 RGB LEDs",
        "Buzzer",
        "Uplink & Downlink DUELink Connectors",
        "2x User Buttons",
        "CR2032 button battery powered",
        "PCB USB-A",
        "27x61mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Eye(l,r)` | Sets the `l` left and `r` right \"Eyes\" with 24bit RGB color (RRGGBB). |\n| `Ear(l,r)` | Activate the `l` left and `r` \"ears\" LEDs (1 on, 0 off). |\n| `Mouth(o)` | Activate the `m` \"mouth\" LED (1 on, 0 off). |\n| `BtnLdr()` | Returns 1 if LDR button is pressed. |\n| `Buzzer(f,d)` | Plays buzzer to `f` frequency(50 to 15K) for `d` duration in milliseconds. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Holiday Tree",
      "partNumber": "GDL-SPHOLIDAYTREE-B",
      "category": "Special",
      "price": 0,
      "tagline": "Smart Holiday Tree with 26 LEDs",
      "description": "This is arguably the smartest holiday tree in the world! Control the LEDs in Standalone mode or connect to a host and control the tree from one of the many supported languages and devices. The 2 boards (A and B) slide into each other, turning this into a 3D-ish module!",
      "keyFeatures": [
        "Stand-up Design",
        "26 Smart LEDs",
        "Buzzer",
        "140x110mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `PlayLED(enable)` | `PlayLED(1)` will make the LED constantly blink, default. Use `PlayLED(0)` to disable playback and manually control the LEDs. |\n| `SetLED(i, c, l)` | Sets a specific LED, `i` index (index start from 1), to a `c` color (hex value), `l` brightness (0 off, max 31). |\n| `SetAll(color)` | Sets all LEDs to a specific color, use 0 to turn off. |\n| `ShowLed()` | Flush Leds, and show. |\n| `RndLed()` | Show random color on random leds. |\n| `Buzzer(f,d)` | Play buzzer with `f` frequency and `d` duration in milliseconds. This is blocking function. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "ePaper M29",
      "partNumber": "GDL-DEPAPERM29-A",
      "category": "Display",
      "price": 0,
      "tagline": "2.9\"",
      "description": "e-Ink (ePaper) displays only need power to update the screen. But then power can be disconnected and the display will retain the graphics with zero power requirements.",
      "keyFeatures": [
        "2.9\" e-Ink display",
        "296x128 resolution",
        "Red/White/Black Color",
        "102x37mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Width()` | Display width. |\n| `Height()` | Display Height. |\n| `DrawOnBW()` | Next drawing functions will go on B&W. |\n| `DrawOnRed()` | Next drawing functions will go on Red. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "ePaper M42",
      "partNumber": "GDL-DEPAPERM42-A",
      "category": "Display",
      "price": 0,
      "tagline": "4.2\"",
      "description": "e-Ink (ePaper) displays only need power to update the screen. But then power can be disconnected and the display will retain the graphics with zero power requirements.",
      "keyFeatures": [
        "4.2\" e-Ink display",
        "400x300 resolution",
        "200x150 actual res",
        "Red/White/Black color",
        "107x87mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Width()` | Display width. |\n| `Height()` | Display Height. |\n| `DrawOnBW()` | Next drawing functions will go on B&W. |\n| `DrawOnRed()` | Next drawing functions will go on Red. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "HDMI",
      "partNumber": "GDL-DHDMI-B",
      "category": "Display",
      "price": 0,
      "tagline": "HDMI Graphics Module",
      "description": "Add HDMI graphics to any Supported Hardware. The board has its own graphics processor and memory. Your system will only need to issue simple commands to show graphics on a 90\" TV screen!",
      "keyFeatures": [
        "HDMI interface",
        "57x77mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Synth(i, s)` | Synthesize a note using built in instruments at index `i` with `s` start. |\n| `DLClear()` | Clear the commands. |\n| `DLCmd(c, {...})` | Add a drawing `c` command with `{...}` arguments. |\n| `DLSwap()` | Execute the graphics commands and swap working buffers. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "LCD 16x2",
      "partNumber": "GDL-DLCD16X2-C",
      "category": "Display",
      "price": 0,
      "tagline": "16x2 Character Display",
      "description": "Print up to 16 characters over 2 rows on this character display.",
      "keyFeatures": [
        "16 Characters by 2 rows",
        "97x37mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Home()` | Send cursor home. |\n| `Clr()` | Clear the display. |\n| `CPos(c,r)` | Sets the cursor position at `c` column and `r` row. |\n| `CPrint(c)` | Print an ASCII `c` character. |\n| `CPrintS(str)` | Print a string. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "LCD 20x4",
      "partNumber": "GDL-DLC20X4-B",
      "category": "Display",
      "price": 0,
      "tagline": "20x4 Character Display",
      "description": "Print up to 20 characters over 4 rows on this character display.",
      "keyFeatures": [
        "20 Characters by 4 Rows",
        "112x62mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Home()` | Send cursor home. |\n| `Clr()` | Clear the display. |\n| `CPos(c,r)` | Sets the cursor position at `c` column and `r` row. |\n| `CPrint(c)` | Print an ASCII `c` character. |\n| `CPrintS(str)` | Print a string. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "OLED 096",
      "partNumber": "GDL-DOLED096-A",
      "category": "Display",
      "price": 0,
      "tagline": "0.96\"",
      "description": "This small 0.96\" display is very sharp due to its OLED construction. It is B&W color, but with 128x64 pixels, it has enough resolution to show plenty of data and graphics.",
      "keyFeatures": [
        "0.96\" display",
        "128x64",
        "40x27mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `GetW()` | Get display width: 128. |\n| `GetH()` | Get display height: 64. |\n| `IsColor()` | Returns 0. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Portal CP70",
      "partNumber": "GDL-DPORTALCP70-B",
      "category": "Display",
      "price": 0,
      "tagline": "7\"",
      "description": "Portal CP70 7\" 800x400 capacitive touch display with a graphics co-processor BT817Q. Drawing using this module will be done via the graphics coprocessor and not the internal graphics engine.",
      "keyFeatures": [
        "Full Color 800x400 Pixels",
        "Graphics co-processor",
        "Capacitive Multi-Touch",
        "167x122mm"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Synth(i, s)` | Synthesize a note using built in instruments at index `i` with `s` start. |\n| `DLClear()` | Clear the commands. |\n| `DLCmd(c, {...})` | Add a drawing `c` command with `{...}` arguments. |\n| `DLSwap()` | Execute the graphics commands and swap working buffers. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "TFT CP23",
      "partNumber": "GDL-DTFTCP23-B",
      "category": "Display",
      "price": 0,
      "tagline": "2.3\"",
      "description": "2.3\" 320x240 color TFT display with capacitive touch screen, supporting Graphics in buffered and in direct modes.",
      "keyFeatures": [
        "Full Color 320x240 Pixels",
        "Capacitive Multi-Touch",
        "67x47mm"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Init(m,o)` | Initialize display `m` mode (buffered = 0 , direct = 1). `o` orientation (landscape = 0, portrait = 1). Init(0, 0) automatically called on power-up. |\n| `GetW()` | Get display width: 106 in buffered, 320 in direct. |\n| `GetH()` | Get display height: 80 in buffered, 240 in direct. |\n| `IsColor()` | Returns 1. |\n| `TouchX()` | Returns touch x. |\n| `TouchY()` | Returns touch y. |\n| `SetDACtrl(s,r,c,b)` | Data access control `s` swapRowCol, `r` invertRow, `c` invertCol, `b` swapBGRSet data access control. |\n| `SetWindow(x,y,w,h)` | Sets draw window `x` display's x value, `y` display's y value., `w` display's width value, `h` display's height value. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "TFT N18",
      "partNumber": "GDL-DTFTN18-B",
      "category": "Display",
      "price": 0,
      "tagline": "1.8\"",
      "description": "1.8\" - 160x128 Color TFT LCD (no touch) display, supporting Graphics.",
      "keyFeatures": [
        "1.8\" display",
        "160x128 pixels",
        "62x37mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Init(m,o)` | Initialize display `m` mode (buffered = 0 , direct = 1). `o` orientation (landscape = 0, portrait = 1). Init(0, 0) automatically called on power-up. |\n| `GetW()` | Get display width: 64 in buffered, 128 in direct. |\n| `GetH()` | Get display height: 80 in buffered, 160 in direct. |\n| `IsColor()` | Returns 1. |\n| `TouchX()` | Returns touch x. |\n| `TouchY()` | Returns touch y. |\n| `SetDACtrl(s,r,c,b)` | Data access control `s` swapRowCol, `r` invertRow, `c` invertCol, `b` swapBGRSet data access control. |\n| `SetWindow(x,y,w,h)` | Sets draw window `x` display's x value, `y` display's y value., `w` display's width value, `h` display's height value. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "TFT R128",
      "partNumber": "GDL-DTFTR128-B",
      "category": "Display",
      "price": 0,
      "tagline": "1.28\"",
      "description": "1.28\" - 240x240 Color TFT LCD round (no touch) display, supporting Graphics.",
      "keyFeatures": [
        "1.28\" Round Display",
        "240x240",
        "47x47mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Init(m)` | Initialize the display. Automatically called on power up `m`mode to (1-direct, 0-buffered (default)). |\n| `GetW()` | Get display width: 80 in buffered, 240 in direct. |\n| `GetH()` | Get display height: 80 in buffered, 240 in direct. |\n| `IsColor()` | Returns 1. |\n| `TouchX()` | Returns touch x. |\n| `TouchY()` | Returns touch y. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "TFT T32",
      "partNumber": "GDL-DTFTT32-C",
      "category": "Display",
      "price": 0,
      "tagline": "3.2\"",
      "description": "3.2-inch TFT touchscreen display for interactive applications"
    },
    {
      "name": "VFD B8",
      "partNumber": "GDL-DVFDB8-C",
      "category": "Display",
      "price": 0,
      "tagline": "Vacuum Fluorescent Character Display",
      "description": "Vacuum fluorescent displays are visually pleasing. This 8x character display looks great at any time, but it will look especially amazing in the dark!",
      "keyFeatures": [
        "Monochrome Vacuum Fluorescent Display",
        "107x22mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `CPrint(x, c)` | Print an ASCII `c` character at `x` pos. |\n| `CPrintS(str)` | Print a string. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Fan",
      "partNumber": "GDL-ACFAN-B",
      "category": "Actuator",
      "price": 0,
      "tagline": "Fan Motor Module",
      "description": "This smart DUELink fan has speed and direction control.",
      "keyFeatures": [
        "On-board motor",
        "2 blade fan",
        "42x42mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Fan(s)` | Sets fan `s` speed (-100 to 100). |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Load",
      "partNumber": "GDL-ACLOAD-A",
      "category": "Actuator",
      "price": 0,
      "tagline": "Load Actuator with 8x Connections",
      "description": "The Load module is designed to control up to 8 actuators. No soldering is necessary as all connections are found on a screw terminal block.",
      "keyFeatures": [
        "8 Load Screw Terminal Connections",
        "80V 1.5A Max",
        "82x32mm overall dimension"
      ]
    },
    {
      "name": "MotoMax",
      "partNumber": "GDL-ACMOTOMAX-B",
      "category": "Actuator",
      "price": 0,
      "tagline": "Heavy Duty 43A Motor Controller",
      "description": "This heavy-duty single motor controller has some serious driving power with up to 27V and 43A!",
      "keyFeatures": [
        "43A H-Bridge",
        "6 to 27V",
        "Screw terminal connections",
        "52x50mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `SMotor(s)` | Sets the motor `s` speed and direction (-100 to 100). |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "MotoTwin",
      "partNumber": "GDL-ACMOTOTWIN-B",
      "category": "Actuator",
      "price": 0,
      "tagline": "Dual Motor Controller",
      "description": "This dual motor controller is capable of driving 2 motors at 1A each, with up to 18V from two screw terminal block.",
      "keyFeatures": [
        "4 to 18V",
        "2A (1A for each motor)",
        "Screw terminal connections",
        "External power terminal block",
        "37x37mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `SMotorA(s)` | Sets Motor A `s` speed and direction (-100 to 100). |\n| `SMotorB(s)` | Sets Motor B `s` speed and direction (-100 to 100). |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Relay P16",
      "partNumber": "GDL-ACRELAYP16-A",
      "category": "Actuator",
      "price": 0,
      "tagline": "16x Isolated Relay Controller",
      "description": "When it comes to power isolation, this module comes in perfectly handy. The relays are optically-isolated from the rest of the circuit. The 16x relays are capable of up to 10A @ 250V each. The relays are powered from a 12V barrel-jack power source.",
      "keyFeatures": [
        "16x optically-isolated",
        "10A @ 250V",
        "Screw terminal blocks",
        "187x90mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Sets(i, v)` | Sets a relay at `i` index to `v` value (1 on, 0 off). |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Relay P4",
      "partNumber": "GDL-ACRELAYP4-C",
      "category": "Actuator",
      "price": 0,
      "tagline": "4x 10A Relay Controller",
      "description": "Control high current loads using these 4x mechanical relays. Each relay is capable of driving up to 1A at 250V. The relays are powered from a 5V barrel-jack power source.",
      "keyFeatures": [
        "10A at 250V",
        "Screw terminal blocks",
        "External Power Barrel Jack",
        "87x52mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Sets(i, v)` | Sets a relay at `i` index to `v` value (1 on, 0 off). |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Relay X1",
      "partNumber": "GDL-ACRELAYX1-A",
      "category": "Actuator",
      "price": 0,
      "tagline": "Single Relay Controller",
      "description": "This single mechanical relay controller is self-powered, right from the DUELink bus. It is capable of 10A @ 250V.",
      "keyFeatures": [
        "Self-powered relay",
        "10A @ 250V",
        "Screw terminal",
        "32x37mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Sets(v)` | Activate the relay (1 on, 0 off). |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Servo P8",
      "partNumber": "GDL-ACSERVOP8-B",
      "category": "Actuator",
      "price": 0,
      "tagline": "8x Servo Motor Controller",
      "description": "Control up to 8x servo motors. Daisylink multiple Servo-P8 for controlling hundreds of servo motors!",
      "keyFeatures": [
        "8x servo motor connections",
        "Eight 3-pin male headers",
        "Power terminal block",
        "37x27mm overall dimension"
      ]
    },
    {
      "name": "Servo X1",
      "partNumber": "GDL-ACSERVOX1-A",
      "category": "Actuator",
      "price": 0,
      "tagline": "Self-Power Single Servo Motor",
      "description": "This DUELink 9G micro servo has everything in a single package. The motor uses power right from the DUELink bus, where it is being controlled as well.",
      "keyFeatures": [
        "Single positional 180 degree servo",
        "9G micro servo included",
        "Self-powered",
        "37x31mm overall dimension"
      ]
    },
    {
      "name": "StepPulse",
      "partNumber": "GDL-ACSTEPPULSE-A",
      "category": "Actuator",
      "price": 0,
      "tagline": "Stepper Motor Signal Generator",
      "description": "This module will generate the signal (pulses) necessary to drive stepper motor controllers. There is a wide range of available controllers, including nicely isolated ones.",
      "keyFeatures": [
        "X,Y,and Z axis control",
        "Terminal Block Connectors",
        "62x22mm overall dimension"
      ]
    },
    {
      "name": "StepDrive P1",
      "partNumber": "GDL-ACSTEPDRIVEP1-A",
      "category": "Actuator",
      "price": 0,
      "tagline": "Single Stepper Motor Driver",
      "description": "This module utilizes the very common stepper motor drivers commonly used in Arduino CNC Shield. They are available in multiple models. We include a driver capable of 30V @ 1A, but you can easily swap it with your favorite driver if desired.",
      "keyFeatures": [
        "Single stepper motor control",
        "30V @ 1A",
        "Terminal block connectors",
        "37x37mm overall dimension"
      ]
    },
    {
      "name": "StepDrive P3",
      "partNumber": "GDL-ACSTEPDRIVEP3-B",
      "category": "Actuator",
      "price": 0,
      "tagline": "3x Stepper Motor Driver",
      "description": "This module utilizes the very common stepper motor drivers commonly used in Arduino CNC Shield. They are available in multiple models. We include drivers capable of 30V @ 1A each, but you can easily swap them with your favorite driver if desired.",
      "keyFeatures": [
        "3x stepper motor control",
        "Terminal Block Connectors",
        "77x42mm overall dimension"
      ]
    },
    {
      "name": "CAN",
      "partNumber": "GDL-CMCAN-B",
      "category": "Communication",
      "price": 0,
      "description": "CAN bus interface module for automotive and industrial networks",
      "keyFeatures": [
        "Support CAN V2.0B",
        "Standard and extended ArbID",
        "Remote frames",
        "Terminal Block Connector",
        "42x42mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Bitrate(b)` | Sets the `b` bitrate (125K, 250K, 500K, 1M) |\n| `RxFull()` | Returns 1 if there is a received CAN message. |\n| `RxRd()` | Reads a received message. Returns the ArbID of the message or -1 if none. `b9` is a 9-byte array contains the message body, with first element containing DLC followed by 0 to 8 bytes of data. |\n| `TxFree()` | Returns 1 if ready for new data, or previous transmit request succeeded. |\n| `TxReq(i,l,b9)` | Request to send a message with `i` EID and `l` length of the `b9` data array. Returns 1 if a message was posted or 0 if busy to take a new one. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "DMX",
      "partNumber": "GDL-CMDMX-B",
      "category": "Communication",
      "price": 0,
      "description": "DMX512 lighting control interface for stage and architectural lighting",
      "keyFeatures": [
        "Light Control Module",
        "On-board Female XLR Connector",
        "42x32mm overall dimension"
      ]
    },
    {
      "name": "Ethernet",
      "partNumber": "GDL-CMETHERNET-C",
      "category": "Communication",
      "price": 0,
      "description": "Ethernet connectivity module for network communications",
      "keyFeatures": [
        "Complete TCP/IP stack",
        "TCP and UDP support",
        "10/100 Base",
        "On-board LAN Connector",
        "37x27mm overall dimension"
      ]
    },
    {
      "name": "MIDI",
      "partNumber": "GDL-CMMIDI-A",
      "category": "Communication",
      "price": 0,
      "tagline": "MIDI Interface",
      "description": "MIDI interface for musical instrument connectivity"
    },
    {
      "name": "RS485",
      "partNumber": "GDL-CMRS485-A",
      "category": "Communication",
      "price": 0,
      "description": "RS485 serial communication for long-distance data transfer",
      "keyFeatures": [
        "RS485 Transceiver",
        "Serial Communication",
        "Terminal Block Connector",
        "32x22mm overall dimension"
      ]
    },
    {
      "name": "Serial USB",
      "partNumber": "GDL-CMSERIALUSB-A",
      "category": "Communication",
      "price": 0,
      "description": "USB to serial converter for legacy device connectivity",
      "keyFeatures": [
        "USB Serial",
        "Virtual Serial Port",
        "USB-C connector",
        "32x27mm overall dimension"
      ]
    },
    {
      "name": "USB Host",
      "partNumber": "GDL-CMUSBHOST-B",
      "category": "Communication",
      "price": 0,
      "description": "USB host controller for connecting USB peripherals",
      "keyFeatures": [
        "USB Host interface",
        "MSC class",
        "FAT16/FAT32 with LFN support",
        "USB-A Host Connector",
        "32x27mm overall dimension"
      ]
    },
    {
      "name": "USB Client",
      "partNumber": "GDL-CMUSBCLIENT-A",
      "category": "Communication",
      "price": 0,
      "tagline": "USB Client Interface",
      "description": "USB client interface for device-mode connectivity"
    },
    {
      "name": "Button AR100",
      "partNumber": "GDL-HIBTNAR100-B",
      "category": "HMI",
      "price": 0,
      "tagline": "Extra Large 100mm Backlit Button",
      "description": "This large 100mm Red arcade button has an internal light and can take serious punches! We also added 3x RGB LEDs around it for some exciting light shows!",
      "keyFeatures": [
        "Light Up 100mm Red button",
        "3x RGB LEDs",
        "107x107mm overall dimension"
      ]
    },
    {
      "name": "BTN RGB28x4",
      "partNumber": "GDL-HIBTNRGB28X4-B",
      "category": "HMI",
      "price": 0,
      "tagline": "4x RGB Backlit Buttons",
      "description": "These four 28mm buttons are transparent white on the outside but are backlit with RGB LEDs. There are 7 possible color combinations, plus off!",
      "keyFeatures": [
        "4x 28mm buttons",
        "Backlit RGB LEDs",
        "92x92 overall dimension"
      ]
    },
    {
      "name": "Button L",
      "partNumber": "GDL-HIBUTTONL-A",
      "category": "HMI",
      "price": 0,
      "tagline": "Large 10x10mm Tactile Button",
      "description": "Add a 10x10mm button to any project!",
      "keyFeatures": [
        "Single 10x10mm Button",
        "27x22mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `BtnPin()` | Returns button's pin number. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Button L7",
      "partNumber": "GDL-HIBUTTONL7-B",
      "category": "HMI",
      "price": 0,
      "tagline": "7x 10x10mm Tactile Buttons",
      "description": "This module includes 7x 10x10mm tactile buttons.",
      "keyFeatures": [
        "7x 10x10mm buttons",
        "52x67mm overall dimension"
      ]
    },
    {
      "name": "Button S",
      "partNumber": "GDL-HIBUTTONS-A",
      "category": "HMI",
      "price": 0,
      "tagline": "Small 5x5mm Tactile Button",
      "description": "This module offers a small \"squishy\" 5x5mm tactile button.",
      "keyFeatures": [
        "Single 5x5mm tactile button",
        "Soft touch",
        "22x22mm overall dimension"
      ]
    },
    {
      "name": "Dial",
      "partNumber": "GDL-HIDIAL-A",
      "category": "HMI",
      "price": 0,
      "tagline": "Dial Module",
      "description": "Use this module to read the position of the dial (potentiometer).",
      "keyFeatures": [
        "Dial (pot) measurement",
        "300 degree rotation",
        "27x22mm overall dimension"
      ]
    },
    {
      "name": "DipSwitch",
      "partNumber": "GDL-HIDIPSWITCH-B",
      "category": "HMI",
      "price": 0,
      "tagline": "10x Config DIP Switches",
      "description": "Use these 10x DIP switches as you wish, usually for config, in your project.",
      "keyFeatures": [
        "10 switch selector",
        "32x22mm overall dimension"
      ]
    },
    {
      "name": "Fingerprint",
      "partNumber": "GDL-HIFINGERPRINT-B",
      "category": "HMI",
      "price": 0,
      "tagline": "Biometric Fingerprint Detector",
      "description": "Read and match prerecorded fingerprints with this intelligent HMI sensor.",
      "keyFeatures": [
        "Fingerprint detector",
        "Biometric sensor",
        "47x42mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `GetSavedCnt()` | Returns how many fingerprint model are saved. |\n| `DelModel(l)` | Deletes model at `l` location. |\n| `StoreModel(l)` | Stores a converted model at `l` location. |\n| `TakeImg()` | Captures a fingerprint image. Returns 0 if succeeded. |\n| `ConvertImg(s)` | Converts captured image and stores it in `s` slot (1 or 2). |\n| `FastSearch()` | Searches the internal database for a converted image. |\n| `SetLed(c,b,k)` | Sets the LED to `c` color (1 red, 2 blue, 3 purple), with `b` blink(0 always on, 1 blink), with `k` count (0 is forever!). |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Joystick L",
      "partNumber": "GDL-HIJOYSTICKL-B",
      "category": "HMI",
      "price": 0,
      "tagline": "Joystick with Push Button",
      "description": "This is a 2-axis joystick with push button.",
      "keyFeatures": [
        "Analog Output",
        "X/Y Axis",
        "Push Button",
        "32x32mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `JoystickX()` | Returns X value from 0 to 100. |\n| `JoystickY()` | Returns Y value from 0 to 100. |\n| `BtnPin()` | Returns button's pin number. |\n| `DVer()` | Returns the driver version. |"
    },
    {
      "name": "Keypad 3x4",
      "partNumber": "GDL-HIKEYPAD3X4-B",
      "category": "HMI",
      "price": 0,
      "tagline": "3x4 Numerical Keypad",
      "description": "3x4 numerical keypad with 12x \"squishy\" push buttons.",
      "keyFeatures": [
        "3x4 numerical keypad",
        "12 buttons",
        "50x87mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `IsKeyChange()` | Returns true if a a change happened, press or unpress. |\n| `RdKey()` | Read the current key state, in ASCII. Zero for no press. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Keypad 4x4",
      "partNumber": "GDL-HIKEYPAD4X4-B",
      "category": "HMI",
      "price": 0,
      "tagline": "4x4 Button Keypad",
      "description": "4x4 keypad with 16x \"squishy\" push buttons.",
      "keyFeatures": [
        "4x4 numerical keypad",
        "16 buttons",
        "65x87mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `IsKeyChange()` | Returns true if a a change happened, press or unpress. |\n| `RdKey()` | Read the current key state, in ASCII. Zero for no press. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Rotary",
      "partNumber": "GDL-HIKEYPAD4X4-C",
      "category": "HMI",
      "price": 0,
      "description": "Rotary encoder with push button for menu navigation",
      "keyFeatures": [
        "Encoder",
        "360 degree rotation",
        "27x22mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `GetValue()` | Returns the current rotary reading. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Flash",
      "partNumber": "GDL-STFLASH-A",
      "category": "Storage",
      "price": 0,
      "tagline": "Flash Memory Storage",
      "description": "Add 16MB of flash storage to any project. Create your own file management system or use the provided sector read/write methods.",
      "keyFeatures": [
        "16MB Flash Storage",
        "22x22mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `SfGetid(b9)` | Returns 3 bytes in `b9` |\n| `SfErase(a)` | Erases a block at `a` address. |\n| `SfWrite(a,b9)` | Writes a byte array `b9` at `a` address. |\n| `SfRead(a,b9)` | Reads a byte array from flash at `a` address. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "SD Card",
      "partNumber": "GDL-STSDCARD-B",
      "category": "Storage",
      "price": 0,
      "tagline": "SD Card Module",
      "description": "Access files on SD cards. Full file system facilities are provided, see File System.",
      "keyFeatures": [
        "SD card slot",
        "FAT file system",
        "47x32mm overall dimension"
      ]
    },
    {
      "name": "MicroSD",
      "partNumber": "GDL-STMICROSD-A",
      "category": "Storage",
      "price": 0,
      "tagline": "MicroSD Card Module",
      "description": "Access files on micro SD cards. Full file system facilities are provided, see File System.",
      "keyFeatures": [
        "Micro SD card slot",
        "FAT file system",
        "32x17mm overall dimension"
      ]
    },
    {
      "name": "GNSS WA",
      "partNumber": "GDL-WGNSSWA-A",
      "category": "Wireless",
      "price": 0,
      "tagline": "GNSS Positioning Module with Antenna",
      "description": "This Global Navigation Satellite System (GPS, Galileo, GLONASS) module has a built-in antenna. Consider this GNSS module if you want to add your own antenna.",
      "keyFeatures": [
        "GNSS positioning",
        "GPS, Galileo, GLONASS",
        "Built-in antenna",
        "37x27mm overall dimension"
      ]
    },
    {
      "name": "GNSS",
      "partNumber": "GDL-WGNSS-B",
      "category": "Wireless",
      "price": 0,
      "tagline": "GNSS Positioning Module with uFL Connector",
      "description": "This Global Navigation Satellite System (GPS, Galileo, GLONASS) module with uFL connector for external antenna. The required antenna is not included, giving the user the choice to select the right antenna.",
      "keyFeatures": [
        "GNSS positioning",
        "GPS, Galileo, GLONASS",
        "uFL antenna connector",
        "37x27mm overall dimension"
      ]
    },
    {
      "name": "Infrared",
      "partNumber": "GDL-WINFRARED-A",
      "category": "Wireless",
      "price": 0,
      "tagline": "Infrared Transmitter & Receiver",
      "description": "Use light, infrared to be exact, to send and receive data. The data is transferred over a 38Khz frequency to filter out any other surrounding infrared light.",
      "keyFeatures": [
        "Infrared Connectivity",
        "Transmitter and Receiver",
        "38Khz carrier frequency",
        "32x48mm overall dimension"
      ]
    },
    {
      "name": "NRF24 Max",
      "partNumber": "GDL-WNRF24MAX-C",
      "category": "Wireless",
      "price": 0,
      "tagline": "Wireless NRF24 Transceiver with Amplified Antenna",
      "description": "Send and receive data wirelessly using SMA 2.4Ghz. The PA+LNA gives this module a coverage of up to a 1000 meters!",
      "keyFeatures": [
        "2.4Ghz SMA signal",
        "125 channels",
        "Amplified signal with external antenna",
        "32x48mm overall dimension"
      ]
    },
    {
      "name": "NRF24 Min",
      "partNumber": "GDL-WNRF24MIN-C",
      "category": "Wireless",
      "price": 0,
      "tagline": "Wireless NRF24 Transceiver",
      "description": "Send and receive data wirelessly using SMA 2.4Ghz. This module uses a simple PCB antenna. Consider NRF24 Max for a coverage of up to a 1000 meters!",
      "keyFeatures": [
        "2.4Ghz SMA signal",
        "125 channels",
        "PCB antenna",
        "[Min Version Available](../wireless/nrf24-max)"
      ]
    },
    {
      "name": "RFID",
      "partNumber": "GDL-WRFID-B",
      "category": "Wireless",
      "price": 0,
      "tagline": "RFID Tag and Card Reader",
      "description": "Read RFID (Radio-Frequency IDentification) unique IDs from tags and access cards. The module includes tags, but any other standard tags should work.",
      "keyFeatures": [
        "RFID reader",
        "Tags and Cards",
        "57x63mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `isCard()` | Returns 1 if a new card is detected. |\n| `ReadCard(a1)` | read the new card in a 16byte array. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Accel",
      "partNumber": "GDL-SEACCEL-A",
      "category": "Sensor",
      "price": 0,
      "tagline": "3-Axis Accelerometer",
      "description": "This 3-axis accelerometer can be used to detect motion, tilt, and acceleration just to name a few.",
      "keyFeatures": [
        "Detect motion, tilt and acceleration",
        "22x20mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `GetX()` | Returns X value. |\n| `GetY()` | Returns Y value. |\n| `GetZ()` | Returns Z value. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "AirQuality",
      "partNumber": "GDL-SEAIRQUALITY-A",
      "category": "Sensor",
      "price": 0,
      "tagline": "Air Quality Sensor",
      "description": "This multi-gas digital sensor is used to detect surrounding air quality.",
      "keyFeatures": [
        "Reads air quality",
        "37x27mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `AhtTemp()` | Returns ambient temperature in celsius. |\n| `AhtHumid()` | Returns relative humidity. |\n| `EnsAqi()` | Returns air quality index. |\n| `EnsTvoc()` | Returns Total Volatile Organic Compounds. |\n| `EnsEco2()` | Returns equivalent CO2. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Barometer",
      "partNumber": "GDL-SEBAROMETER-B",
      "category": "Sensor",
      "price": 0,
      "tagline": "Barometric Pressure Sensor",
      "description": "This barometric pressure sensor also includes temperature and humidity measurements.",
      "keyFeatures": [
        "Reads pressure levels",
        "Humidity and temperature",
        "17x20mm overall dimension"
      ]
    },
    {
      "name": "ClipSense",
      "partNumber": "GDL-SECLIPSENSE-A",
      "category": "Sensor",
      "price": 0,
      "tagline": "Clip-friendly IOs with Capacitive Sensing",
      "description": "With these alligator-clip-friendly pads, users can easily connect(clip) anything that requires digital inputs/outputs. These pads also support analog and PWM (analog out) functionality.",
      "keyFeatures": [
        "8x Digital GPIO",
        "8x Analog inputs",
        "8x Digital outputs",
        "8x Capacitive touch",
        "37x34mm overall dimension"
      ]
    },
    {
      "name": "Current",
      "partNumber": "GDL-SECURRENT-A",
      "category": "Sensor",
      "price": 0,
      "tagline": "Current Sensor",
      "description": "Connect the terminal block inline of AC or DC power to measure its current. The sensor has an internal resistance of 1.2 milli-ohm. It is capable of measuring up to 12.5A.",
      "keyFeatures": [
        "12.5A current sensor",
        "25A current option",
        "27x22mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Current()` | Reads the current flow level in Amps. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Distance",
      "partNumber": "GDL-SEDISTANCE-B",
      "category": "Sensor",
      "price": 0,
      "tagline": "Ultrasonic Distance Sensor",
      "description": "This sensor sends an ultrasonic chirp, then it measures the time it takes for the sound to bounce back. The time it takes maps to the distance between the sensor and the object it's facing.",
      "keyFeatures": [
        "Ultrasonic Type",
        "15° range",
        "40mm to 4meter",
        "47x30mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Distance()` | Reads the current distance in cm. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "DOF9",
      "partNumber": "GDL-SEDOF9-C",
      "category": "Sensor",
      "price": 0,
      "tagline": "9DoF MEMS Sensor",
      "description": "This 9DoF (Degrees of Freedom) MEMS (Micro Electro Mechanical System) sensor includes 3axis accelerometer, 3axis gyro, & 3axis magnetometer. The combination of these inputs can be used to get exact tilt and orientation.",
      "keyFeatures": [
        "3axis Accelerometer",
        "3axis Gyro",
        "3axis Magnetometer",
        "22x25mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `RAccel()` | Reads the acceleration XYZ in `_x`, `_y`, `_Z` variables. |\n| `RCompass()` | Reads the compass XYZ in `_x`, `_y`, `_Z` variables. |\n| `RGyro()` | Reads the gyro XYZ and its internal temp in `_x`, `_y`, `_Z`, `_T` variables. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "EKG",
      "partNumber": "GDL-SEEKG-A",
      "category": "Sensor",
      "price": 0,
      "tagline": "Heart EKG Sensor",
      "description": "Use this module to experiment with heart EKG signals. This is NOT a medical device but an educational sensor for experimentation. The kit includes probes and sticker pads.",
      "keyFeatures": [
        "EKG (ECG)",
        "Includes probes and pads",
        "Electrocardiogram",
        "52x32mm overall dimension"
      ]
    },
    {
      "name": "Gas",
      "partNumber": "GDL-SEGAS-B",
      "category": "Sensor",
      "price": 0,
      "tagline": "Gas Sensor",
      "description": "This gas sensor ships with MQ-7 (carbon monoxide) installed. However, the module uses a socket allowing the sensor be be easily swapped with other gas sensors, like MQ-3 alcohol gas sensor.",
      "keyFeatures": [
        "Gas Sensing",
        "Sensor Socket",
        "Heating control circuit",
        "27x42mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Heater(s)` | Sets the heater `s` state (1 on, 0 off). |\n| `Read()` | Reads the current voltage level in Volts. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Light",
      "partNumber": "GDL-SELIGHT-A",
      "category": "Sensor",
      "price": 0,
      "tagline": "Ambient Light Sensor",
      "description": "A good sensor for detecting daytime or when lights are turned on. This is not an accurate light level sensor, but provides overall ambient light levels.",
      "keyFeatures": [
        "Light sensor",
        "17x19mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Light()` | Returns value from 0 to 100. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Motion",
      "partNumber": "GDL-SEMOTION-B",
      "category": "Sensor",
      "price": 0,
      "tagline": "PIR Motion Sensor",
      "description": "PIR (Passive Infrared) motion sensors use light in its view to detect motion.",
      "keyFeatures": [
        "Digital motion sensing",
        "27x22mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Detect()` | Returns 1 if motion is detected. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Pressure",
      "partNumber": "GDL-SEPRESSURE100-B",
      "category": "Sensor",
      "price": 0,
      "tagline": "Air and Liquid Pressure Sensor",
      "description": "Connect this sensor to your instrument using a tiny pipe to measure water/liquid pressure. Different ranges are available.",
      "keyFeatures": [
        "Air and liquid pressure",
        "Measure pressure",
        "17x26mm overall dimension"
      ]
    },
    {
      "name": "RTC",
      "partNumber": "GDL-SERTC-B",
      "category": "Sensor",
      "price": 0,
      "tagline": "Realtime Clock",
      "description": "This module is a RTC (Real Time Clock) \"time sensor\" with a backup battery to keep time running even when the system is powered off.",
      "keyFeatures": [
        "Real Time Clock",
        "Button Battery Holder",
        "37x22mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `SetTime(y,n,d,h,m,s)` | Sets date/time to `y` year, `n` month, `d` day, `h` hour, `m` minute, and `s` second. |\n| `GetTime()` | Returns current time in \\_y, \\_n, \\_d, \\_h, \\_m, \\_s variables. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "TempHmd",
      "partNumber": "GDL-SETEMPHMD-B",
      "category": "Sensor",
      "price": 0,
      "tagline": "Temperature & Humidity Sensor",
      "description": "Measure temperature with +-0.5 degree of accuracy at 0.1 celsius resolution. The humidity sensor is +=2RH% accurate with a resolution of 0.1%RH.",
      "keyFeatures": [
        "DHT22 Digital Sensor",
        "Temperature and Humidity",
        "27x33mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `SenPin()` | Returns the sensor's pin number. |\n| `SenType()` | Returns the sensor's type. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "TempRTD",
      "partNumber": "GDL-SETEMPRTD-A",
      "category": "Sensor",
      "price": 0,
      "tagline": "TempRTD Sensor",
      "description": "This sensor uses the included RTD (Resistance Temperature Detector) to measure temperatures.",
      "keyFeatures": [
        "RTD Temperature Sensor",
        "42x27 overall dimension"
      ]
    },
    {
      "name": "LED MT1208",
      "partNumber": "GDL-LLEDMT1208R-A",
      "category": "LED",
      "price": 0,
      "tagline": "12x8 LED Matrix",
      "description": "Use these 96 dazzling LEDs to show text, create flashy games, or run whatever effect you desire. You will be surprised with how much you can do with a 12x8 LED matrix!",
      "keyFeatures": [
        "12x8 LED Matrix",
        "96 Total LEDs",
        "42x32mm overall dimension"
      ]
    },
    {
      "name": "LED R16",
      "partNumber": "GDL-LLEDR16R-B",
      "category": "LED",
      "price": 0,
      "tagline": "16x LED Ring",
      "description": "A ring with 16 LEDs.",
      "keyFeatures": [
        "16 LED Ring",
        "32x32mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `SetLed(l, v)` | Sets Led at `l` (1 to 16) to a `v` value (1 on, 0 off). |\n| `LedOff()` | Resets all leds to off. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "LED RGB3",
      "partNumber": "GDL-LLEDRGB3-A",
      "category": "LED",
      "price": 0,
      "tagline": "3x RGB LED",
      "description": "A visual LED with 3x RGB LEDs. These lights can be set to any of 7 colors or can be turned off.",
      "keyFeatures": [
        "3 RGB LEDs",
        "32x22mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `SetLed(i, c)` | sets an LED at `i` (0 to 3) to `c` (RRGGBB color). |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "LED S284",
      "partNumber": "GDL-LLEDS284-B",
      "category": "LED",
      "price": 0.00,
      "tagline": "0.28\" 4-Digit 7-Segment Display",
      "description": "These 0.28\" 4-digit 7-segment displays come in two types: a counter with decimal point, and timer with a colon in the middle.",
      "keyFeatures": [
        "4-digit 7-segment LEDs",
        "Available in Red or Green",
        "Counter or Timer formatted",
        "47x17mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Init()` | Initialize the module. Automatically called on power up. |\n| `Digit(n)` | Draw `n` number to LEDs. |\n| `Seg7(i, s)` | Draw a single `s` digit (0 to 9) on `i` digit. |\n| `Dot(i, v)` | Draw a dot at `i` index with `v` value (0 off 1 on) on count-type LED. |\n| `Colon(n)` | Show colon on time-type LED. |\n| `DVer()` | This driver version. |",
      "variations": [
        {
          "name": "LED S284-C Red",
          "partNumber": "GDL-LLEDS284CR-B",
          "price": 0.00
        },
        {
          "name": "LED S284-T Red",
          "partNumber": "GDL-LLEDS284TR-B",
          "price": 0.00
        },
        {
          "name": "LED S284-C Green",
          "partNumber": "GDL-LLEDS284CG-B",
          "price": 0.00
        },
        {
          "name": "LED S284-T Green",
          "partNumber": "GDL-LLEDS284TG-B",
          "price": 0.00
        }
      ]
    },
    {
      "name": "LED S404",
      "partNumber": "GDL-LLEDS404-A",
      "category": "LED",
      "price": 0.00,
      "tagline": "0.40\"",
      "description": "These 0.40\" 4-digit 7-segment displays come in two types: a counter with decimal point, and timer with a colon in the middle.",
      "keyFeatures": [
        "4 Digit 7 segment LEDs",
        "Available in Red or Green",
        "Counter or Timer formatted",
        "57x17mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Init()` | Initialize the module. Automatically called on power up. |\n| `Digit(n)` | Draw `n` number to LEDs. |\n| `Seg7(i, s)` | Draw a single `s` digit (0 to 9) on `i` digit. |\n| `Dot(i, v)` | Draw a dot at `i` index with `v` value (0 off 1 on) on count-type LED. |\n| `Colon(n)` | Show colon on time-type LED. |\n| `DVer()` | This driver version. |",
      "variations": [
        {
          "name": "LED S404-C Red",
          "partNumber": "GDL-LLEDS404CR-A",
          "price": 0.00
        },
        {
          "name": "LED S404-T Red",
          "partNumber": "GDL-LLEDS404TR-A",
          "price": 0.00
        },
        {
          "name": "LED S404-C Green",
          "partNumber": "GDL-LLEDS404CG-A",
          "price": 0.00
        },
        {
          "name": "LED S404-T Green",
          "partNumber": "GDL-LLEDS404TG-A",
          "price": 0.00
        }
      ]
    },
    {
      "name": "LED S564",
      "partNumber": "GDL-Lled564XX-A",
      "category": "LED",
      "price": 0,
      "tagline": "0.56\"",
      "description": "These 0.56\" 4-digit 7-segment displays come in two types: a counter with decimal point, and timer with a colon in the middle.",
      "keyFeatures": [
        "4 Digit 7 segment LEDs",
        "Available in Red or Green",
        "Counter or Timer formatted",
        "67x22mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `Init()` | Initialize the module. Automatically called on power up. |\n| `Digit(n)` | Draw `n` number to LEDs. |\n| `Seg7(i, s)` | Draw a single `s` digit (0 to 9) on `i` digit. |\n| `Dot(i, v)` | Draw a dot at `i` index with `v` value (0 off 1 on) on count-type LED. |\n| `Colon(n)` | Show colon on time-type LED. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "LED SS805",
      "partNumber": "GDL-LledS805-C",
      "category": "LED",
      "price": 0,
      "tagline": "0.80\"",
      "description": "14-segment displays ar good to display alpha-numerical info. This 0.80 is a decent size to be visible from a few feet.",
      "keyFeatures": [
        "4 Digit 7 segment LEDs",
        "Available in Red or Green",
        "Counter or Timer formatted",
        "117x32mm overall dimension"
      ]
    },
    {
      "name": "Smart LED",
      "partNumber": "GDL-LSMARTLED-A",
      "category": "LED",
      "price": 0,
      "tagline": "Smart LED Controller",
      "description": "The DUELink standard library includes support for WS2811 smart LEDs. When using matrices, the support is even included with the graphics function.",
      "keyFeatures": [
        "WS2811 LED Controller",
        "Support for DAT/CLK type",
        "Terminal Block Connection",
        "37x22mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `WS2811()` | Returns the pin number used for DAT pin to be used with `WS2811` Smart LED [Graphics](/docs/engine/graphics). |\n| `IntAPA(c)` | Get the system ready for `APA102C`. |\n| `SetAPA(i, c, l)` | Sets the color at `i` index to `c` color (RRGGBB) and `l` luminance (0 to 31). |\n| `ShwAPA()` | Show/update the actual LEDs with preassigned colors. |\n| `IntLPD(c)` | Get the system ready for `LPD8806`. |\n| `SetLPD(i, c)` | Sets the color at `i` index to `c` color (RRGGBB) |\n| `ShwLPD()` | Show/update the actual LEDs with preassigned colors. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Buzzer",
      "partNumber": "GDL-SOBUZZER-B",
      "category": "Sound",
      "price": 0,
      "tagline": "Peizo Buzzer Sound Generator",
      "description": "Use this peizo buzzer to generate tones and simple melodies. Sound an alarm, play a melody when a task is finished or even generate noises!",
      "keyFeatures": [
        "Frequency Range 200Hz to 10Khz",
        "22x20mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `PlayBeep(f, d)` | Play beep, (f: frequency, d: duration in ms). |\n| `PlaySound(f, d, c)` | Play sound, (f: frequency, d: duration in ms, c: duty cycle). |\n| `PlayMelody(a1)` | Play melody. `a1` is a float array, (odd elements: frequency, even elements: duration). |\n| `StopMelody()` | Stop melody. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "MP3",
      "partNumber": "GDL-SOMP3-A",
      "category": "Sound",
      "price": 0,
      "tagline": "MP3 Micro SD Player",
      "description": "Play MP3 audio/music from files found on the attached Micro SD card. The audio quality is reasonable and single mono channel. There is no system load as the module only receives and processes simple commands, like start playing, or stop. The files on the Micro SD card are saved in standard FAT16/FAT32 file system and can handle SD cards up to 32GB. Note that you will not have access to the files directly. Only the MP3 decoder can read the files. You will need to move the Micro SD card to a PC to load it with MP3 files.\n\nMicro SD card is required and is not included.",
      "keyFeatures": [
        "MP3 decoder",
        "Auto playback",
        "Micro SD card reader",
        "37x22mm Overall Dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `SendCmd(c, a)` | Send `c` command & `a` argument to mp3 module. |\n| `WResponse(t, c, a)` | `t` timeout, `c` code, `a` argument. Wait for response. |\n| `Stop()` | Stop playing. |\n| `SetVol(v)` | Sets `v` volume. (Min 0, max 30) |\n| `IsBusy()` | Returns 1 if busy. |\n| `Loop(r)` | Sets `r` repeat. |\n| `Rst()` | Reset mp3 module. |\n| `PlayFile(f, d)` | Play file. `f` Files and `d` directories must be named in numerics. |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Radio FM",
      "partNumber": "GDL-SORADIOFM-A",
      "category": "Sound",
      "price": 0,
      "tagline": "FM Radio Receiver",
      "description": "Use simple commands to set the channel and audio level on this FM Radio Receiver. The module includes a standard 3.5mm stereo audio plug, for connecting headphones or amplified speakers.",
      "keyFeatures": [
        "FM Radio Receiver",
        "Sets channel and audio level",
        "3.5mm stereo audio connector",
        "47x27mm overall dimension"
      ]
    },
    {
      "name": "Spectrum",
      "partNumber": "GDL-SOSPECTRUM-A",
      "category": "Sound",
      "price": 0,
      "tagline": "Spectrum Analyzer",
      "description": "This module breaks down the incoming audio into 63Hz, 160Hz, 400Hz, 1Khz, 2.5Khz, 6.25Khz, 16Khz. It then measures the audio level at these frequencies.",
      "keyFeatures": [
        "Frequency Analyzer",
        "7 individual frequency filters",
        "37x22mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `UpdBnd()` | Update all 7 bands. Values are stored in `a1[]` array (0 to 100). |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Barcode L1D2D",
      "partNumber": "GDL-VIBARCODEL1D2D-A",
      "category": "Vision",
      "price": 0,
      "description": "1D/2D barcode and QR code scanner module",
      "keyFeatures": [
        "Barcode scanner",
        "1D and 2D formats",
        "47x42mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `SetMode(m)` | Sets the `m` mode to 1 Trigger 2 Continuous |\n| `Trigger()` | Trigger the reading when in trigger mode |\n| `DVer()` | This driver version |"
    },
    {
      "name": "Thermal",
      "partNumber": "GDL-VITHERMAL-A",
      "category": "Vision",
      "price": 0,
      "description": "Thermal imaging camera for heat detection",
      "keyFeatures": [
        "Thermal camera",
        "8x8 pixels",
        "0° to 80° celsius",
        "22x24mm overall dimension"
      ],
      "driverTable": "| Function | Description |\n|----------|-------------|\n| `PixTemp(p)` | Read one of the `p` pixels' temp. There are 64 pixels (0 to 63). |\n| `DVer()` | This driver version. |"
    },
    {
      "name": "Dio X12",
      "partNumber": "GDL-ADDIOX12-A",
      "category": "Adapter",
      "price": 0,
      "description": "12-channel digital I/O expansion module",
      "keyFeatures": [
        "12x inputs & outputs",
        "Terminal Block Header",
        "27x18mm overall dimension"
      ]
    },
    {
      "name": "DueClick",
      "partNumber": "GDL-ADDUECLICK-A",
      "category": "Adapter",
      "price": 0,
      "description": "MikroE Click board adapter for extended functionality",
      "keyFeatures": [
        "MikroBus headers",
        "42x27mm overall dimension"
      ]
    },
    {
      "name": "DuePi",
      "partNumber": "GDL-ADDUEPI-B",
      "category": "Adapter",
      "price": 0,
      "description": "Raspberry Pi HAT adapter for Pi compatibility",
      "keyFeatures": [
        "Attaches to Raspberry Pi or Pi Zero Header",
        "0.96\" OLED Display",
        "2x User Buttons",
        "Piezo Buzzer",
        "Breakaway \"Holey\" Section",
        "Terminal Block for Additional Connectivity",
        "65x56.5mm overall dimension"
      ]
    },
    {
      "name": "DuePico",
      "partNumber": "GDL-ADDUEPICO-B",
      "category": "Adapter",
      "price": 0,
      "description": "Raspberry Pi Pico adapter for RP2040 integration",
      "keyFeatures": [
        "Raspberry Pi Pico Headers",
        "0.96\" OLED Display",
        "2x User Buttons",
        "8 Pin Header",
        "Piezo Buzzer",
        "65x37mm overall dimension"
      ]
    },
    {
      "name": "Cables-1",
      "partNumber": "GDL-AXCABLES-A",
      "category": "Accessories",
      "price": 0,
      "tagline": "DUELink Cables",
      "description": "A variety of DUELink cable lengths available: 5x 50mm, 5x 150mm, 5x 300mm, 5x 100mm JST to pin header breakout, and Variety Pack (1x 300mm, 2x 150mm, 2x 50mm)",
      "keyFeatures": [
        "50mm DUELink Cable",
        "150mm DUELink Cable",
        "300mm DUELink Cable",
        "100mm DUELink Breakout Cable"
      ]
    },
    {
      "name": "Connectors-1",
      "partNumber": "GDL-AXCONNECTORS-A",
      "category": "Accessories",
      "price": 0,
      "tagline": "DUELink JST Connectors",
      "description": "Standard 4-pin 1mm JST connectors for building your own DUELink modules. Available in Uplink and Downlink configurations, blue and white, surface mount.",
      "keyFeatures": [
        "4pin 1mm JST connector",
        "Blue and White",
        "Surface Mount JST Connectors"
      ]
    },
    {
      "name": "Holey Boards-1",
      "partNumber": "GDL-AXHOLEYBOARDS-A",
      "category": "Accessories",
      "price": 0,
      "tagline": "Holey Boards for Mounting DUELink Modules",
      "description": "Blank circuits with standard 5mm-pitched holes for mounting DUELink modules. Available in three sizes: Holey Smally (18x12 holes), Holey Board (36x18 holes), and Holey Moley (46x36 holes).",
      "keyFeatures": [
        "5mm-pitch holes",
        "Front grid markings",
        "Back clean printing",
        "Holey Smally: 92x62",
        "Holey: 182x92mm",
        "Holey Moley Board: 182x232mm"
      ]
    },
    {
      "name": "Mounting Hardware-1",
      "partNumber": "GDL-AXMOUNTING-A",
      "category": "Accessories",
      "price": 0,
      "tagline": "Mounting Hardware",
      "description": "Complete mounting hardware kit including M3 standoffs (male-female and female-female), nylon screws, nuts, and metal footpads for mounting DUELink modules.",
      "keyFeatures": [
        "Universal M3 Size",
        "Perfect for [Holey Boards](holey-board)"
      ]
    }
  ]
}